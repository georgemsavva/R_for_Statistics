---
title: "Intro to R for statistics, Day 2"
author: 
  - George Savva, QIB
  - Pirita Paajanen, JIC
subtitle: "Self-directed exercise"
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 1
    self-contained: true
    smooth-scroll: true
    number-sections: false
---


Today's worksheet introduces you to a real dataset.  

The tasks you will cover are: 

* reading data into R from an Excel file
* checking and cleaning the data 
* revision of some of statistics and graphing that we covered on the first day.

## The dataset

The data are from a randomised clinical trial of a new rehabilition intervention (compared to standard post-stroke care) aimed at improving the walking speed of hospital patients. Better walking speed is a good indicator of general stroke recovery.

We have recorded:

* The age and sex of each participant,
* The treatment allocation,
* The hospital department from which they were recruited and
* Time they take to complete a walking task.

Our research questions are:

* Does the treatment improve walking speed compared to controls?
* By how much does it improve, and how certain are we of this?

The dataset can be found at [walkingspeed_day2.xlsx](./walkingspeed_day2.xlsx)

* Powerpoint slides to support this material are at:

[day3.pptx](./day3.pptx)

[day3_data_lm.pptx](./day3_data_lm.pptx)

# Using `readxl` to read data from Excel files

R is not used for data entry or storage; you are likely to have data stored as an Excel file, a csv file, in a database, or in some other format generated by a device.

So before we can do any analysis we need to import data.  We do this in code like everything else in R.

Base R cannot read data from Excel files.  But several add-on ‘packages’ *can* read and write Excel files.  Currently the best package for reading Excel files is called `readxl`.  For writing Excel files the `openxlsx` package is very good.

Whatever the format your raw data there is likely to be a package to read it into R:

* `readxl` for Excel format
* `haven` for other statistics packages (Stata, SPSS etc)
* `readr` or `data.table` for csv and plain text
* `pzfx` for GraphPad Prism.
* Various `Bioconductor` packages for 'omics data in various formats. 

Here we will import a dataset from Excel using the `readxl` package.  If you already installed `tidyverse` then you already have this package.  

Once the library is installed we can use the function `readxl::read_excel()`, which reads data from an excel file.

## Make sure the data looks OK and is in the right place on your computer

Before we dive in and import it, we need to make sure our data is in a sensible place.

1. Open RStudio and switch to the project you created in day 1, or start a new project if necessary.

2. Then, save the example data [`walkingspeed_day2.xlsx`](`walkingspeed_day2.xlsx`) for this tutorial into your project folder.  Check that it has appeared in the 'files' pane in RStudio.

3. Start a new script file that will eventually include all of the commands we need to import, clean, visualise and analyse the data.

4. Now open the dataset in Excel and explore the file so that you understand what is there.

## Read the help!

We are nearly ready to import our data.  But before using a new function its always good to read its documentation.

R and R packages are not as self-explanatory as other software, and so you should expect to spend a fair amount of time, particularly as you are learning R, reading documentation, vignettes, blogs, etc on what R can do, which packages exist, and how to use them.

The `read_excel()` function has a few different options so first we should look at the help file:
  
```{r eval=FALSE}
?read_excel # where does the helpfile appear?
```

Make sure to check: 

* **Description** what does the function do,
* **Usage** what is the syntax
* **Arguments** detail of what all the options mean
* **Value** what do I get when I run this
* **Examples** (usually very helpful)

Note from the help file that `read_excel()` can extract data from different sheets and ranges of an Excel workbook, can use or ignore column names, and allows you to specify the type of data (numeric, dates, text etc) if you want to, or leave it to R to guess.

Many R packages also have vignettes or websites including simpler guides to their use in specific cases.  `readxl` has a website that you might find helpful:  [https://readxl.tidyverse.org/](https://readxl.tidyverse.org/)

Now we’ll load the data.  We want to use the ‘walking speed’ data from the walkingspeed.xlsx spreadsheet. 

* Open the spreadsheet in Excel and find this sheet.  The data we want is in the sheet called 'day2'.

From the `read_excel()` help file we can deduce the syntax to load this data into R:
  
```{r }
library(readxl)
walkingdat <- read_excel(path="walkingspeed_day2.xlsx", sheet="day2")
```

This line assumes that the file ‘walkingspeed_day2.xlsx’ is in the current working directory (you can check what this is with `getwd()`.  The current working directory is shown just above the R console window.  You can see the files in the current working directory in the 'Files' tab on the bottom right of the RStudio window.  When you create or load a project RStudio will set the working directory to the root of the project directory.

This line calls the `read_excel()` function, with the arguments ‘path’, ‘sheet’ set.  The other arguments will be set to their default values, which you can see from the help file.  

We could have set the range of the data in the spreadsheet (I usually do this for safety), but `read_excel()` can figure it out automatically most of the time; by default it picks the biggest continuous chunk of data starting in the top left of the sheet.

Now you should have a ‘data frame’ object called `walkingdat` in your environment, which includes the data from the Excel sheet ready to process and analyse.

Our workflow now is:

1. Clean and code
2. Visualise
3. Describe
4. Model
5. Diagnose model
6. Interpret


# Cleaning

Before we can analyse our data we should check each variable to make sure that it looks OK.

We'll use functions from day 1 to explore the content and structure of the dataset, and the distributions of the main variables.  We can then address any problems that we find.

Recall these functions from the day 1 notes.  We are checking that the variables have the correct type, and the distributions of the categorical variables.  

This is an important aspect of any data analysis and we should not skip this step.

```{r }
library(tidyverse)
summary(walkingdat)
class(walkingdat$age)
# hist(age)
table(walkingdat$group)
table(walkingdat$sex)
table(walkingdat$department)
```

You will have noticed that one of the numerical variables, age, has been loaded as character variable and not a numeric.  We cannot do anaysis with a character variable!

Why do you think the variable is imported as character and not numeric?

We can convert age to a numeric using `as.numeric`.

```{r }
# Tidyverse version:
walkingdat <- walkingdat |> mutate(age = as.numeric(age))

# Base R version:
walkingdat$age <- as.numeric(walkingdat$age)
```

What warning message did you get when you converted this variable?  What does it mean?


How might we check on the age and time variables to see if the distribution looks OK?

We could make some descriptive statistics and basic plots!

```{r }
hist(walkingdat$age)
hist(walkingdat$time)
range(walkingdat$time, na.rm=TRUE)
range(walkingdat$time, na.rm = TRUE)

```


## Dealing with outliers

It looks like there are some unreasonably high and low values of walking time.  

We can make another graph of walking speed against age, this time on a logarithmic scale so both the extreme high and extreme low points are visible, to see what is going on.

```{r }

## ggplot2 version
library(ggplot2)
ggplot(walkingdat) + aes(x=age, y=time) + geom_point() + scale_y_log10()

## base R version
plot(walkingdat$age, walkingdat$time, log="y")
```

It seems there are some values for time that are likely to be technical errors.  We can remove these values (set them to missing) in a few different ways:

```{r }
## base R method
walkingdat$time[walkingdat$time<0.1] <- NA
walkingdat$time[walkingdat$time>100] <- NA

## Using mutate and ifelse
walkingdat <- walkingdat |> mutate(time = ifelse(time<0.1,NA,time))
walkingdat <- walkingdat |> mutate(time = ifelse(time>100,NA,time))

## the 'pure' tidyverse way with case_when is a bit clunky.
## look up 'case_when()' to understand this line
walkingdat <- walkingdat |> mutate( time = case_when(time<0.1 ~ NA_real_ , 
                                                     time>100 ~ NA_real_, 
                                                     TRUE ~ time) )

# Now check the distribution of time again.
hist(walkingdat$time, breaks=100)
range(walkingdat$time, na.rm = TRUE)

```

Now we have a cleaned dataset in our environment we can proceed with our visualisation and analysis:

# Analysis - Exercises

Add commands to your script file to answer the following questions.  Add comments (lines beginning with `#` to help you remember what you did and why!).

Some solutions are posted at the bottom of the page, but it will help you a lot to try to answer them on your own, by discussing with colleagues, or by looking up help online before using the solutions.

If you don't understand the given solution, then please ask and we can go through it in the class.

We will discuss the testing, modelling and graphing elements in more detail on day 3, but it would be helpful to attempt these today.

1. Structure of the dataset
    a. What are the names of the variables that comprise the `walkingdata` dataframe?
    a. What is the class of each?
    a. How many columns and rows does it have?

1. Descriptive statistics
    a. What is the age of youngest patient? 
    a. What is the age of the oldest patient? 
    a. Are the oldest and youngest patient male or female?

1. Cross-tabulation
    a. How many Male and Female patients are there?
    a. Is the sex ratio balanced between treatment groups?
    a. How many women are there of age under 50? How many men are there of age under 50?

1.  Descriptive statistics using a subset of the data
    a. What is the average walking speed for men between 50 and 60 years of age?

1.  Deriving new variables
    a. Create a new column that will have the speed of walking, that is 1/time.
    a. Create a new column that will have the time rounded up to nearest 10th of a second.

1.  Graphing
    a. Consider what kind of graph you might make to illustrate the difference in walking speed between treatment groups, and try to make it using ggplot. Eg:
    a. Make a scatter plot of time vs age
    a. Make the colour of each point reflect the treatment group
    a. Make a box plot of time by sex, with a different coloured box per sex
    a. Label the axes appropriately
    a. Try a violin plot instead of a boxplot (with geom_violin).  Which do you prefer?
    a. Make any other adjustments you think are informative!

1.  Hypothesis Testing
    a. What is the difference in average walking speed between control patients and treated patients?
    a. Is this difference statistically significant? Use t-test `t.test()` and Mann-Whitney tests `wilcox.test()` to examine the differences between the groups.  Look up the syntax for t.test() and wilcos.test() using the help system, and use them to check whether the time taken to complete the task varies by treatment status.  In each case use the version of the function that takes a `formula` agument. Remember the `formula` syntax from the `boxplot` and `lm` functions in day 1.
    a. Compare the p-values for each method.
    a. Consider the assumptions for a t-test, and whether they are met in this dataset.  
    a. Do you believe that treatment affects walking speed?


# Solutions

The exercises will have many possible solutions, under each exercise we have listed a few possible answers.  Most are possible using the functions we have introduced in day 1 of the course, or with functions I suggest in the questions, but in some cases there are other solutions that I have given using different functions/packages.

If you answered the questions another way then that's fine, but do try to understand how the given solutions work.

### Structure of the dataset

*What are the names of the variables that comprise the `walkingdat` dataframe?*

```{r }
library(tidyverse)

# Eg
str(walkingdat)
names(walkingdat)
summary(walkingdat)
```

*What is the class of each?  What is the class of `walkingdat`?*

```{r }
str(walkingdat)

lapply(walkingdat, class)  #  'lapply' takes a list (first argument) and applies a function (second argument) to every element of that list.

walkingdat |> map(class) # map is the tidyverse version of lapply.  It is in the 'purrr' package which is loaded when you library(tidyverse).

class(walkingdat) # walkingdat is a dataframe, but it is also a `tbl` which is a datframe with a few tidyverse enhancements.
```

#. How many columns and rows does `walkingdat` have?

```{r }
dim(walkingdat) # Get the dimension
nrow(walkingdat) # Get the number of rows
length(walkingdat) # The 'length' of a data frame is the numve
```

### Descriptive statistics

*What is the age of youngest patient?*

```{r }
# look at the help for what na.rm does.  You'll see many of the summary statistics need this.
min(walkingdat$age, na.rm=TRUE)
walkingdat |> summarize(min(age, na.rm=TRUE))

walkingdat |> select(age) |> min(na.rm=TRUE)
```

*What is the age of the oldest patient?*

```{r }

max(walkingdat$age)

walkingdat |> summarize(max(age, na.rm=TRUE))

walkingdat |> select(age) |> max(na.rm=TRUE)

range(walkingdat$age, na.rm=TRUE)

summary(walkingdat)

```

*Are the oldest and youngest patient male or female?*

```{r }
walkingdat |> filter(age==47)
walkingdat |> filter(age==72)


walkingdat[which.max(walkingdat$age), "sex"]
walkingdat[which.min(walkingdat$age), "sex"]

```

### Cross-tabulation

*How many Male and Female patient are there?*

```{r }
walkingdat |> filter( sex =='F' ) |> count()
walkingdat |> filter( sex =='M' ) |> count()

table(walkingdat$sex)

walkingdat |> group_by(sex) |> count()

```

*Is the sex ratio balanced between treatment groups?*

```{r }
walkingdat |> filter( group =='treat', sex =='M' ) |> count()
walkingdat |> filter( group =='treat', sex =='F' ) |> count()

```

*How many women are there of age under 50? How many men are there of age under 50?*

```{r }
walkingdat |> filter(age < 50 , sex =='F' ) |>  count()
walkingdat |> filter(age < 50 , sex =='M' ) |>  count()

table(walkingdat$sex, walkingdat$age<50)

```

### Descriptive statistics using a subset of the data

*What is the average walking speed for men between 60 and 70 years of age?*

```{r }
walkingdat |> filter(age >59, age <71,  sex =='M' )  |> 
  select(time) |> pull() |> mean()

walkingdat |> filter( age >59, age <71,  sex =='M' ) |> 
  summarise(mean(time))

```


### Deriving new variables

*Create a new column that will have the speed of walking, that is 1/time.*

```{r }
walkingdat <- walkingdat |> mutate(speed=1/as.numeric(time))

```

*Create a new column that will have the time rounded to the nearest 10th of a second.*

```{r }
walkingdat <- walkingdat |> mutate(rounded=round(as.numeric(time), digits = 2))

```

### Graphing

*Consider what kind of graph you might make to illustrate the difference in walking speed between treatment groups, and try to make it using ggplot.*

*Make a scatter plot of time vs age*
*Make the colour of each point reflect the treatment group*

```{r }
ggplot(data=walkingdat) +
  aes(x=age,y=time,colour=group) + 
  geom_point()
```

*Make a box plot of time by sex, with a different coloured box per sex*

```{r }
ggplot(data=walkingdat) +
  aes(x=sex,y=time,fill=sex) + 
  geom_boxplot()
```

*Label the axes appropriately*

ggplot(data=walkingdat) +
  aes(x=sex,y=time,fill=sex) + 
  geom_boxplot() + 
  labs(x="Sex", y="Time to complete task (s)")

*Try a violin plot instead of a boxplot (with geom_violin).  Which do you prefer?*
*Make any other adjustments you think are informative!*



### Hypothesis testing

*What is the difference in task completion time between control patients and treated patients?*

```{r }
lm( time ~ group , data=walkingdat) |> broom::tidy()

lm( time ~ group , data=walkingdat) |> summary()

```

*Is this difference statistically significant?*

```{r }
lm( time ~ group , data=walkingdat) |> anova()

```

*Use t-test `t.test()` and Mann-Whitney tests `wilcox.test()` to examine the differences between the groups.*

```{r }
t.test( time ~ group , data=walkingdat)
wilcox.test( time ~ group , data=walkingdat)

```

*. Consider the assumptions underlying the t-test, and whether they are met in this dataset*

The t-test and the linear model assume that the outcome variable is normally distributed within groups, which is not the case here.  So the results from these is probably wrong.

The Mann-Whitney test (Wilcox test) does not make this assumption, and is more robust in this case.

*Do you believe that treatment affects walking speed?*

*Try the t-test or linear model using the speed variable that you created instead of the time variable that is in the dataset.*