{
  "hash": "431f7913122d2c3e7dbf1e51b88d4027",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Iris dataset analysis walkthrough\"\ndate: January 2024\nauthor: \n  - George Savva, QIB\nalways_allow_html: true\nformat:\n  html:\n    theme: cosmo\n    toc: true\n    toc-depth: 2\n    smooth-scroll: true\n    number-sections: true\n---\n\n\n\n\nThis file is intended as a summary of some of the important features discussed during the 'R for Statistics' training course.\n\nThe aspects covered are:\n\n* Loading data from csv files\n* Descriptive statistics \n* Graphing with base R and ggplot\n* Simple linear modelling with continuous outcomes, and categorical and continuous predictors\n\nI do not include model diagnostics, nor data wrangling with tidyverse here.  These are important topics that are introduced in the individual session worksheets.\n\n## Loading and describing data.\n\nLoad a package we will need:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2) # ggplot is for making publication quality graphs\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'ggplot2' was built under R version 4.3.3\n```\n\n\n:::\n:::\n\n\n\n\nLoad data from a csv file using `read.csv`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris <- read.csv(\"iris.csv\")\n```\n:::\n\n\n\n\nGet some statistics on the structure of the dataset to make sure it's all read in OK.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 150\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t150 obs. of  6 variables:\n $ X           : int  1 2 3 4 5 6 7 8 9 10 ...\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : chr  \"setosa\" \"setosa\" \"setosa\" \"setosa\" ...\n```\n\n\n:::\n:::\n\n\n\n\nExtract single variables (vectors) from the dataset\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris$Sepal.Length\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1\n [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0\n [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5\n [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1\n [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5\n [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3\n[109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2\n[127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8\n[145] 6.7 6.7 6.3 6.5 6.2 5.9\n```\n\n\n:::\n:::\n\n\n\n\nNote that R is case sensitive so this does not work:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris$sepal.length\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n:::\n\n\n\n\nGet individual elements if we want to.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris$Sepal.Length[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.1\n```\n\n\n:::\n:::\n\n\n\n\nGet the 2nd, 4th and 6th elements (extract a subset by position)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris$Sepal.Length[c(2,4,6)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.9 4.6 5.4\n```\n\n\n:::\n:::\n\n\n\n\nGet the 10th to the 20th elements of the vector\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris$Sepal.Length[10:20]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 5.7 5.1\n```\n\n\n:::\n:::\n\n\n\n\nBy default, `Species` is read as a string (because the option `stringsAsFactors` is set to FALSE by default).  \nSo if we want to use `Species` as a categorical variable we have to convert it into a 'factor'.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris$Species <- factor(iris$Species)\n```\n:::\n\n\n\n\nWe can use the default plotting system to make a quick plot, but it's a bit ugly!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(iris, col=iris$Species)\n```\n\n::: {.cell-output-display}\n![](irisScript_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\nDemonstration of using the base `hist` function if we want a quick histogram\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris$Sepal.Width |> hist(breaks=20)\n```\n\n::: {.cell-output-display}\n![](irisScript_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\nSummary does different things depending on what kind of object is passed to it.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       X           Sepal.Length    Sepal.Width     Petal.Length  \n Min.   :  1.00   Min.   :4.300   Min.   :2.000   Min.   :1.000  \n 1st Qu.: 38.25   1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600  \n Median : 75.50   Median :5.800   Median :3.000   Median :4.350  \n Mean   : 75.50   Mean   :5.843   Mean   :3.057   Mean   :3.758  \n 3rd Qu.:112.75   3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100  \n Max.   :150.00   Max.   :7.900   Max.   :4.400   Max.   :6.900  \n  Petal.Width          Species  \n Min.   :0.100   setosa    :50  \n 1st Qu.:0.300   versicolor:50  \n Median :1.300   virginica :50  \n Mean   :1.199                  \n 3rd Qu.:1.800                  \n Max.   :2.500                  \n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(iris$Sepal.Width)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.000   2.800   3.000   3.057   3.300   4.400 \n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(iris$Species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    setosa versicolor  virginica \n        50         50         50 \n```\n\n\n:::\n:::\n\n\n\n\nWe can do a statistical test using two variables. \n(Although this association is better tested using `lm` as below)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor.test(iris$Sepal.Length, iris$Petal.Width)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tPearson's product-moment correlation\n\ndata:  iris$Sepal.Length and iris$Petal.Width\nt = 17.296, df = 148, p-value < 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.7568971 0.8648361\nsample estimates:\n      cor \n0.8179411 \n```\n\n\n:::\n:::\n\n\n\n\nFind the minimum sepal width\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin(iris$Sepal.Width)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\nTabulate the species to find the number of observations for each\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(iris$Species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n    setosa versicolor  virginica \n        50         50         50 \n```\n\n\n:::\n:::\n\n\n\n\n\n## Graphing\n\nMake a histogram with red bars\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(iris$Sepal.Length, col=\"red\")\n```\n\n::: {.cell-output-display}\n![](irisScript_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\nTo quickly demonstrate the formula interface we made a (not very nice) boxplot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot( Petal.Length ~ Species , data=iris)\n```\n\n::: {.cell-output-display}\n![](irisScript_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\nCould we have done this with the native pipe?  \nThis doesn't work (because if the arguments are unnamed `iris` needs to be the second argument)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> boxplot(Petal.Length ~ Species)\n```\n\n::: {.cell-output-display}\n![](irisScript_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\nBut either of these two lines does work:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> boxplot(Petal.Length ~ Species , data=_)\n```\n\n::: {.cell-output-display}\n![](irisScript_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n```{.r .cell-code}\niris |> boxplot(data=_ , Petal.Length ~ Species )\n```\n:::\n\n\n\n\nWe can make a much nice boxplot using ggplot2.\nMake sure you understand what each of these lines does!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> ggplot() + \n  aes(x=Species , y=Petal.Length, fill=Species) + \n  geom_boxplot() + \n  ggtitle(\"Petal length by Species\") + \n  theme_bw() + \n  scale_y_log10(breaks=c(1,2,3,4,5,6,7,8,9,10)) + \n  labs(y=\"Petal length (cm)\")\n```\n\n::: {.cell-output-display}\n![](irisScript_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\nIf we want to export the plot we can assign it to an object then save that object with `ggsave`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot1 <- ggplot(iris) + \n  aes(x=Species , y=Petal.Length, fill=Species) + \n  geom_boxplot()\nggsave(\"lengthboxplot.png\",boxplot1, width=5, height=5, dpi=\"retina\")\n```\n:::\n\n\n\n\nI was asked what would happen if we wanted to load data with no header.\nThe best answer is 'try it and see'.  We make `iris2.csv` with no header row.\nWhen we tried to load it, the first row of values was assumed to be the header.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris2 <- read.csv(\"iris2.csv\")\nhead(iris2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  X1 X5.1 X3.5 X1.4 X0.2 setosa\n1  2  4.9  3.0  1.4  0.2 setosa\n2  3  4.7  3.2  1.3  0.2 setosa\n3  4  4.6  3.1  1.5  0.2 setosa\n4  5  5.0  3.6  1.4  0.2 setosa\n5  6  5.4  3.9  1.7  0.4 setosa\n6  7  4.6  3.4  1.4  0.3 setosa\n```\n\n\n:::\n:::\n\n\n\n\nSo we looked at the help file to check how to correctly load the data, and how to assign names if we wanted to.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris2 <- read.csv(file = \"iris2.csv\",\n                  header=FALSE,\n                  col.names = c(\"X\", \"PL\", \"PW\", \"SW\", \"SL\", \"Species\"))\nhead(iris2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  X  PL  PW  SW  SL Species\n1 1 5.1 3.5 1.4 0.2  setosa\n2 2 4.9 3.0 1.4 0.2  setosa\n3 3 4.7 3.2 1.3 0.2  setosa\n4 4 4.6 3.1 1.5 0.2  setosa\n5 5 5.0 3.6 1.4 0.2  setosa\n6 6 5.4 3.9 1.7 0.4  setosa\n```\n\n\n:::\n:::\n\n\n\n\n## Modelling\nMost of our statistical tests can be thought of in terms of statistical\nmodels.  Simple linear regression models are the simplest models, we can do most things by generalisaing these.\n\nIn R, we use a formula to describe the model we want to estimate. \nHere we want to model how the average of sepal width varies (statistically, not necessarily causally) with sepal length.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(data=iris , Sepal.Width ~ Sepal.Length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = Sepal.Width ~ Sepal.Length, data = iris)\n\nCoefficients:\n (Intercept)  Sepal.Length  \n     3.41895      -0.06188  \n```\n\n\n:::\n:::\n\n\n\n\nTo do anything useful we need to make an `lm` object (here called model1)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel1 <- lm(data=iris , Sepal.Width ~ Sepal.Length)\n```\n:::\n\n\n\n\nNow we extract the model summary\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(model1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = Sepal.Width ~ Sepal.Length, data = iris)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.1095 -0.2454 -0.0167  0.2763  1.3338 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   3.41895    0.25356   13.48   <2e-16 ***\nSepal.Length -0.06188    0.04297   -1.44    0.152    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4343 on 148 degrees of freedom\nMultiple R-squared:  0.01382,\tAdjusted R-squared:  0.007159 \nF-statistic: 2.074 on 1 and 148 DF,  p-value: 0.1519\n```\n\n\n:::\n:::\n\n\n\n\nGet the `gtsummary` package if you don't have it already.\n(with `install.packages(\"gtsummary\")`).  \nThe `tbl_regression` function from this package makes a nicely formatted regression table.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngtsummary::tbl_regression(model1)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"pnztfghsyh\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#pnztfghsyh table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#pnztfghsyh thead, #pnztfghsyh tbody, #pnztfghsyh tfoot, #pnztfghsyh tr, #pnztfghsyh td, #pnztfghsyh th {\n  border-style: none;\n}\n\n#pnztfghsyh p {\n  margin: 0;\n  padding: 0;\n}\n\n#pnztfghsyh .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#pnztfghsyh .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#pnztfghsyh .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#pnztfghsyh .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#pnztfghsyh .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#pnztfghsyh .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#pnztfghsyh .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#pnztfghsyh .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#pnztfghsyh .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#pnztfghsyh .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#pnztfghsyh .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#pnztfghsyh .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#pnztfghsyh .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#pnztfghsyh .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#pnztfghsyh .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#pnztfghsyh .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#pnztfghsyh .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#pnztfghsyh .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#pnztfghsyh .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#pnztfghsyh .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#pnztfghsyh .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#pnztfghsyh .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#pnztfghsyh .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#pnztfghsyh .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#pnztfghsyh .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#pnztfghsyh .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#pnztfghsyh .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#pnztfghsyh .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#pnztfghsyh .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#pnztfghsyh .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#pnztfghsyh .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#pnztfghsyh .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#pnztfghsyh .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#pnztfghsyh .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#pnztfghsyh .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#pnztfghsyh .gt_left {\n  text-align: left;\n}\n\n#pnztfghsyh .gt_center {\n  text-align: center;\n}\n\n#pnztfghsyh .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#pnztfghsyh .gt_font_normal {\n  font-weight: normal;\n}\n\n#pnztfghsyh .gt_font_bold {\n  font-weight: bold;\n}\n\n#pnztfghsyh .gt_font_italic {\n  font-style: italic;\n}\n\n#pnztfghsyh .gt_super {\n  font-size: 65%;\n}\n\n#pnztfghsyh .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#pnztfghsyh .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#pnztfghsyh .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#pnztfghsyh .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#pnztfghsyh .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#pnztfghsyh .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#pnztfghsyh .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#pnztfghsyh .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#pnztfghsyh div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"label\"><span data-qmd-base64=\"PHN0cm9uZz5DaGFyYWN0ZXJpc3RpYzwvc3Ryb25nPg==\"><span class='gt_from_md'><strong>Characteristic</strong></span></span></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"estimate\"><span data-qmd-base64=\"PHN0cm9uZz5CZXRhPC9zdHJvbmc+\"><span class='gt_from_md'><strong>Beta</strong></span></span></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"conf.low\"><span data-qmd-base64=\"PHN0cm9uZz45NSUgQ0k8L3N0cm9uZz4=\"><span class='gt_from_md'><strong>95% CI</strong></span></span><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;line-height:0;\"><sup>1</sup></span></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"p.value\"><span data-qmd-base64=\"PHN0cm9uZz5wLXZhbHVlPC9zdHJvbmc+\"><span class='gt_from_md'><strong>p-value</strong></span></span></th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">Sepal.Length</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">-0.06</td>\n<td headers=\"conf.low\" class=\"gt_row gt_center\">-0.15, 0.02</td>\n<td headers=\"p.value\" class=\"gt_row gt_center\">0.2</td></tr>\n  </tbody>\n  \n  <tfoot class=\"gt_footnotes\">\n    <tr>\n      <td class=\"gt_footnote\" colspan=\"4\"><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;line-height:0;\"><sup>1</sup></span> <span data-qmd-base64=\"Q0kgPSBDb25maWRlbmNlIEludGVydmFs\"><span class='gt_from_md'>CI = Confidence Interval</span></span></td>\n    </tr>\n  </tfoot>\n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\nWe can also use `ggplot` to draw a linear model:\nNote how the slope and intercept of the `stat_smooth` line corresponds to the model summary output\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> ggplot() + \n  aes(x=Sepal.Length , \n      y=Sepal.Width, \n      ) + \n  geom_point() +\n  theme_bw() +\n  stat_smooth(method=\"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](irisScript_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n\nBy adding colours we can see that our first model may not be the best, because\nthere is clearly an effect of species on the outcome variable that we have\nignored. So we should estimate a separate line for each species, but consider\nthat we have changed the reserach question quite substantially:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> ggplot() + \n  aes(x=Sepal.Length , \n      y=Sepal.Width, \n      shape=Species,\n      col=Species) + \n  geom_point() +\n  theme_bw() +\n  stat_smooth(method=\"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](irisScript_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can make linear models corresponding to more complex relationships!\nThis is an advantage of using linear models instead of other 'ad hoc' statistical testing.\nThis model corrects for the effect of species on sepal width:\n\nEntering just the main effect (as below) lead to a separate but parallel line for each species.  The slope (effect of sepal length) does not vary with species.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel2 <- lm(data = iris , Sepal.Width ~ Sepal.Length + Species )\nsummary(model2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = Sepal.Width ~ Sepal.Length + Species, data = iris)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.95096 -0.16522  0.00171  0.18416  0.72918 \n\nCoefficients:\n                  Estimate Std. Error t value Pr(>|t|)    \n(Intercept)        1.67650    0.23536   7.123 4.46e-11 ***\nSepal.Length       0.34988    0.04630   7.557 4.19e-12 ***\nSpeciesversicolor -0.98339    0.07207 -13.644  < 2e-16 ***\nSpeciesvirginica  -1.00751    0.09331 -10.798  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.289 on 146 degrees of freedom\nMultiple R-squared:  0.5693,\tAdjusted R-squared:  0.5604 \nF-statistic: 64.32 on 3 and 146 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\n\nBut we can add an *interaction term* to allow the effect of sepal length to vary by species\nThese two models are the same.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel4 <- lm(data = iris , Sepal.Width ~ Sepal.Length + Species + Sepal.Length:Species )\nmodel4 <- lm(data = iris , Sepal.Width ~ Sepal.Length * Species )\nsummary(model4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = Sepal.Width ~ Sepal.Length * Species, data = iris)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.72394 -0.16327 -0.00289  0.16457  0.60954 \n\nCoefficients:\n                               Estimate Std. Error t value Pr(>|t|)    \n(Intercept)                     -0.5694     0.5539  -1.028 0.305622    \nSepal.Length                     0.7985     0.1104   7.235 2.55e-11 ***\nSpeciesversicolor                1.4416     0.7130   2.022 0.045056 *  \nSpeciesvirginica                 2.0157     0.6861   2.938 0.003848 ** \nSepal.Length:Speciesversicolor  -0.4788     0.1337  -3.582 0.000465 ***\nSepal.Length:Speciesvirginica   -0.5666     0.1262  -4.490 1.45e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2723 on 144 degrees of freedom\nMultiple R-squared:  0.6227,\tAdjusted R-squared:  0.6096 \nF-statistic: 47.53 on 5 and 144 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\n\nWe can use the `emmeans` package to extract the slope at each level of `Species` from model 4.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemmeans::emtrends(model4 , pairwise~Species , var=\"Sepal.Length\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$emtrends\n Species    Sepal.Length.trend     SE  df lower.CL upper.CL\n setosa                  0.799 0.1100 144    0.580    1.017\n versicolor              0.320 0.0754 144    0.171    0.469\n virginica               0.232 0.0612 144    0.111    0.353\n\nConfidence level used: 0.95 \n\n$contrasts\n contrast               estimate     SE  df t.ratio p.value\n setosa - versicolor      0.4788 0.1340 144   3.582  0.0013\n setosa - virginica       0.5666 0.1260 144   4.490  <.0001\n versicolor - virginica   0.0878 0.0971 144   0.905  0.6382\n\nP value adjustment: tukey method for comparing a family of 3 estimates \n```\n\n\n:::\n:::\n\n\n\n\nThe `ANOVA` function can be used to generate the old-fashioned ANOVA table corresponding to each model:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(model4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnalysis of Variance Table\n\nResponse: Sepal.Width\n                      Df  Sum Sq Mean Sq  F value    Pr(>F)    \nSepal.Length           1  0.3913  0.3913   5.2757   0.02307 *  \nSpecies                2 15.7225  7.8613 105.9948 < 2.2e-16 ***\nSepal.Length:Species   2  1.5132  0.7566  10.2011  7.19e-05 ***\nResiduals            144 10.6800  0.0742                       \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\n\nOr to test whether one model is a significantly better fit than another:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(model1 , model2, model4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnalysis of Variance Table\n\nModel 1: Sepal.Width ~ Sepal.Length\nModel 2: Sepal.Width ~ Sepal.Length + Species\nModel 3: Sepal.Width ~ Sepal.Length * Species\n  Res.Df    RSS Df Sum of Sq       F    Pr(>F)    \n1    148 27.916                                   \n2    146 12.193  2   15.7225 105.995 < 2.2e-16 ***\n3    144 10.680  2    1.5132  10.201  7.19e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\n\nHere we see model 4 is better than model 2, (and model 2 is better than model\n1). So there is good evidence that we should fit independent slopes for each species.\n\n## Some linear algebra\n\nI was asked about the maths underlying the linear regression.  \nLinear Algebra for linear regression is straightforward, and is explained here (https://xebia.com/blog/the-linear-algebra-behind-linear-regression/).  \nMost of you will not need to worry about this!\nYou can calculate the coefficients by extracting the model matrix, then applying the following formula:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nX <- model.matrix(model2)\nb = solve(t(X)%*%X) %*% \n  t(X) %*% \n  iris$Sepal.Width\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                        [,1]\n(Intercept)        1.6765001\nSepal.Length       0.3498801\nSpeciesversicolor -0.9833885\nSpeciesvirginica  -1.0075104\n```\n\n\n:::\n:::\n\n\n\n\nCompare it to:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoef(model2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      (Intercept)      Sepal.Length Speciesversicolor  Speciesvirginica \n        1.6765001         0.3498801        -0.9833885        -1.0075104 \n```\n\n\n:::\n:::\n\n\n\n\nGet the residual error\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigma <- ((X %*% b - iris$Sepal.Width) |> sd())*sqrt((149/146))\nsigma\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.288989\n```\n\n\n:::\n:::\n\n\n\n\ncompare it to:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigma(model2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.288989\n```\n\n\n:::\n:::\n\n\n\n\n## Day 3 script - a bit more analysis, ANOVA and log-transformation \nOn day three we looked at a few different graphs:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(ggbeeswarm)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'ggbeeswarm' was built under R version 4.3.3\n```\n\n\n:::\n:::\n\n\n\n\nA box plot shows a great 'five point summary' for each distribution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris) + aes(x=Species, y=Petal.Length, fill=Species) + \n  geom_boxplot(outlier.colour = NA) + \n  geom_beeswarm(size=1)\n```\n\n::: {.cell-output-display}\n![](irisScript_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n\n\nThe log-scale graph suggested that a log-transformed model might be more appropriate\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris) + aes(x=Species, y=Petal.Length, fill=Species) + \n  geom_boxplot(outlier.colour = NA) + \n  geom_beeswarm(size=1) + \n  scale_y_log10()\n```\n\n::: {.cell-output-display}\n![](irisScript_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n\n\nA 'dynamite' plot is less useful, but could be acceptable if you overlay the true data points.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris) + aes(x=Species, y=Petal.Length, fill=Species) + \n  stat_summary(geom=\"col\") + \n  stat_summary(geom=\"errorbar\", width=0.5) + \n  geom_beeswarm()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNo summary function supplied, defaulting to `mean_se()`\nNo summary function supplied, defaulting to `mean_se()`\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](irisScript_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can estimate a model corresponding to these graphs. The `1+` tells R to\ninclude an intercept term.  We don't need to explicity say this, but if we\ndon't want the intercept then we need to use `0+`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_petal_length_species <- lm(data=iris , Petal.Length ~ 1+Species)\n```\n:::\n\n\n\n\nThis is an anova for the hypothesis that all the species differences are zero\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(model_petal_length_species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnalysis of Variance Table\n\nResponse: Petal.Length\n           Df Sum Sq Mean Sq F value    Pr(>F)    \nSpecies     2 437.10 218.551  1180.2 < 2.2e-16 ***\nResiduals 147  27.22   0.185                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\n\nThe model summary shows the individual regression coefficients\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(model_petal_length_species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = Petal.Length ~ 1 + Species, data = iris)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-1.260 -0.258  0.038  0.240  1.348 \n\nCoefficients:\n                  Estimate Std. Error t value Pr(>|t|)    \n(Intercept)        1.46200    0.06086   24.02   <2e-16 ***\nSpeciesversicolor  2.79800    0.08607   32.51   <2e-16 ***\nSpeciesvirginica   4.09000    0.08607   47.52   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4303 on 147 degrees of freedom\nMultiple R-squared:  0.9414,\tAdjusted R-squared:  0.9406 \nF-statistic:  1180 on 2 and 147 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\n\nWe can get the pairwise contrasts with emmeans.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemmeans::emmeans(model_petal_length_species , pairwise ~ Species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$emmeans\n Species    emmean     SE  df lower.CL upper.CL\n setosa       1.46 0.0609 147     1.34     1.58\n versicolor   4.26 0.0609 147     4.14     4.38\n virginica    5.55 0.0609 147     5.43     5.67\n\nConfidence level used: 0.95 \n\n$contrasts\n contrast               estimate     SE  df t.ratio p.value\n setosa - versicolor       -2.80 0.0861 147 -32.510  <.0001\n setosa - virginica        -4.09 0.0861 147 -47.521  <.0001\n versicolor - virginica    -1.29 0.0861 147 -15.012  <.0001\n\nP value adjustment: tukey method for comparing a family of 3 estimates \n```\n\n\n:::\n:::\n\n\n\n\nWe said the log-transformation might be needed.\nWe can estimate a model for log(Petal.Length)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_petal_length_species_log <- \n  lm(data=iris , log(Petal.Length) ~ Species)\n```\n:::\n\n\n\n\nNow `emmeans` reports ratios instead of differences.  Could make more sense\nbiologically!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemmeans::emmeans(model_petal_length_species_log , \n                 pairwise ~ Species, type=\"response\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$emmeans\n Species    response     SE  df lower.CL upper.CL\n setosa         1.45 0.0230 147     1.41     1.50\n versicolor     4.23 0.0670 147     4.10     4.37\n virginica      5.53 0.0874 147     5.36     5.70\n\nConfidence level used: 0.95 \nIntervals are back-transformed from the log scale \n\n$contrasts\n contrast               ratio      SE  df null t.ratio p.value\n setosa / versicolor    0.343 0.00767 147    1 -47.835  <.0001\n setosa / virginica     0.263 0.00588 147    1 -59.747  <.0001\n versicolor / virginica 0.766 0.01710 147    1 -11.912  <.0001\n\nP value adjustment: tukey method for comparing a family of 3 estimates \nTests are performed on the log scale \n```\n\n\n:::\n:::\n",
    "supporting": [
      "irisScript_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}