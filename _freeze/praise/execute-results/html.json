{
  "hash": "c17b22a9cecf72ff10c1f293c5b8af46",
  "result": {
    "markdown": "---\ntitle: \"Packages and Pipes\"\nauthor: \"George Savva (QIB)\"\nalways_allow_html: true\nformat:\n  html:\n    theme: cosmo\n    toc: true\n    toc-depth: 2\n    smooth-scroll: true\n    number-sections: true\n---\n\n\nR is mainly for statistical computing but there are add-on packages to do many other things.  You are likely to need to use add-on packages for reading Excel files, data manipulation, running specific analyses, creating nice reports etc.\n\nIn this tutorial we will get used to using R packages, objects, functions, pipes and how to use the R help system by making ascii animals say nice things to us.\n\n# Installing packages\n\nWe will use three packages:\n\n* `praise`\n\n* `spongebob`\n\n* `cowsay`\n\nR does not come with these installed, so first we'll need to 'install' the packages into our local R setup.\n\nTo get these packages from CRAN (the Comprehensive R Archive Network) use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages( c(\"praise\", \"spongebob\", \"cowsay\") )\n```\n:::\n\n\n# Using functions from installed packages\n\nFirst we'll use the function called `praise` from the `praise` package to generate a nice message:\n\nFirst try\n\n\n::: {.cell}\n\n```{.r .cell-code}\npraise()\n```\n:::\n\n\nThis won't work because although the package is installed on your computer, R does not know to look for functions there.\n\nUse instead:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npraise::praise()\n```\n:::\n\n\nIf we don't want to specify the package each time we want to use the function we can add it to the search path:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(praise)\n```\n:::\n\n\nNow, for the rest of our `R` session we can use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npraise()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"You are grand!\"\n```\n:::\n:::\n\nIf we restart our R we'll need to run `library` again.\n\nNow lets try to use our second package, `cowsay`, to have a message spoken by a text mode animal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncowsay::say(what=\"Hi George\", by=\"cat\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n -------------- \nHi George \n --------------\n    \\\n      \\\n        \\\n            |\\___/|\n          ==) ^Y^ (==\n            \\  ^  /\n             )=*=(\n            /     \\\n            |     |\n           /| | | |\\\n           \\| | |_|/\\\n      jgs  //_// ___/\n               \\_)\n  \n```\n:::\n:::\n\n\nIf we didn't want to type `cowsay` everytime to use this function, how could we have done it?\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Expand for solution\"}\nlibrary(cowsay)\nsay(what=\"'library()' adds a package to the search path!\", by=\"hypnotoad\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```````\n\n ----- \n'library()' adds a package to the search path! \n ------\n    \\          ,'``.._   ,'``.\n     \\        :,--._:)\\,:,._,.:\n      \\       :`--,''   :`...';\\\n               `,'       `---'  `.\n               /                 :\n              /                   \\\n            ,'                     :\\.___,-.\n           `...,---'``````-..._    |:       \\\n             (                 )   ;:    )   \\  _,-.\n              `.              (   //          `'    \\\n               :               `.//  )      )     , ;\n             ,-|`.            _,'/       )    ) ,' ,'\n            (  :`.`-..____..=:.-':     .     _,' ,'\n             `,'\\ ``--....-)='    `._,  \\  ,') _ '``._\n          _.-/ _ `.       (_)      /     )' ; / \\ \\`-.'\n         `--(   `-:`.     `' ___..'  _,-'   |/   `.)\n             `-. `.`.``-----``--,  .'\n               |/`.\\`'        ,','); SSt\n                   `         (/  (/\n  \n```````\n:::\n:::\n\n# Help and arguments\n\nSuppose we want our message printed a different colour.\n\nIs this possible?  How could we do it?\n\nWhen we first use a new R function we should check the documentation.  Try:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?say\n```\n:::\n\n\nThings to consider here:\n\n* Structure of a help file\n\n* Arguments\n\n* Defaults\n\n* Splitting function calls over lines\n\n* RStudio helping us out with code completion\n\nUsing the information in the help file can you make the message print in blue?\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Expand for solution\"}\n# A function call split over lines can be easier to read\nsay(what=\"Use what_color='blue' to get the text in blue.\", \n    by=\"cat\", \n    what_color=\"blue\")\n```\n:::\n\n\n# Combining functions\n\nR is unusual for a statistics package in that different functions and different packages all work together.  So the output from one function can be used as the input for another package.  This is extremely useful when we want to (for example) load data, manipulate data, estimate a statistical model and report on the model each with different packages.  This is part of what makes R so powerful.\n\nSo how can we pass the output from one function into another?\n\nTry each of these code chunks, and try to understand how they work:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsay( praise() )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n -------------- \nYou are remarkable! \n --------------\n    \\\n      \\\n        \\\n            |\\___/|\n          ==) ^Y^ (==\n            \\  ^  /\n             )=*=(\n            /     \\\n            |     |\n           /| | | |\\\n           \\| | |_|/\\\n      jgs  //_// ___/\n               \\_)\n  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmymessage <- praise()  # look in the 'environment' tab in the right hand pane. what does <- do?\nsay(mymessage)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n -------------- \nYou are rad! \n --------------\n    \\\n      \\\n        \\\n            |\\___/|\n          ==) ^Y^ (==\n            \\  ^  /\n             )=*=(\n            /     \\\n            |     |\n           /| | | |\\\n           \\| | |_|/\\\n      jgs  //_// ___/\n               \\_)\n  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npraise() |> say()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n -------------- \nYou are marvelous! \n --------------\n    \\\n      \\\n        \\\n            |\\___/|\n          ==) ^Y^ (==\n            \\  ^  /\n             )=*=(\n            /     \\\n            |     |\n           /| | | |\\\n           \\| | |_|/\\\n      jgs  //_// ___/\n               \\_)\n  \n```\n:::\n:::\n\n\nThings to talk about here!\n\n* Nesting the functions\n\n* Creating an object\n\n* Pipes\n\n# A third package\n\nThe `spongebob` package includes a function called `tospongebob` that turns text into 'mocking spongebob case'.  That is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspongebob::tospongebob(\"We should do all our statistics using SPSS\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"we SHOulD dO ALl OUr STaTistICS usING spsS\"\n```\n:::\n:::\n\n\nYour task:\n\nHave an animal of your choice praise you using mocking spongebob case.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Expand for a possible solution\"}\npraise() |> \n  spongebob::tospongebob() |>\n  say(by=\"duck\", by_color=\"purple\")\n```\n:::\n\n\n## OK that's enough fun.\n\nOK now back to the real work.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}