{
  "hash": "f090c265e4bc4d259be540e6504ea1e6",
  "result": {
    "markdown": "---\ntitle: \"Intro to R for statistics, Day 2 (MSc version)\"\ndate: October 2023\nauthor: \n  - George Savva, QIB\n  - Pirita Paajanen, JIC\nsubtitle: \"Loading, cleaning and plotting data\"\nformat:\n  html:\n    theme: cosmo\n    toc: true\n    toc-depth: 1\n    smooth-scroll: true\n    number-sections: false\n---\n\n\n\nToday's worksheet introduces you to a real dataset.  \n\nThe tasks you will cover are: \n\n* reading data into R from an Excel file\n* checking and cleaning the data \n* revision of some of statistics and graphing that we covered on the first day.\n\n## The dataset\n\nThe data are from a randomised clinical trial of a new rehabilition intervention (compared to standard post-stroke care) aimed at improving the walking speed of hospital patients. Better walking speed is a good indicator of general stroke recovery.\n\nWe have recorded:\n\n* The age and sex of each participant,\n* The treatment allocation,\n* The hospital department from which they were recruited and\n* Time they take to complete a walking task.\n\nOur research questions are:\n\n* Does the treatment improve walking speed compared to controls?\n* By how much does it improve, and how certain are we of this?\n\nThe dataset can be found at [walkingspeed_day2.xlsx](./walkingspeed_day2.xlsx)\n\n* Powerpoint slides to support this material are at:\n\n[day3.pptx](./day3.pptx)\n\nOur workflow is:\n\n1. Clean and code\n2. Visualise\n3. Describe\n4. Model\n5. Diagnose model\n6. Interpret\n\n# Using `readxl` to read data from Excel files\n\nR is not used for data entry or storage; you are likely to have data stored as an Excel file, a csv file, in a database, or in some other format generated by a device.\n\nSo before we can do any analysis we need to import data.  We do this in code like everything else in R.\n\nDo read Excel files we use the package called `readxl`.  If you already installed `tidyverse` then you already have this package.  \n\nOnce the library is installed we can use the function `readxl::read_excel()`, which reads data from an excel file.\n\n## Make sure the data looks OK and is in the right place on your computer\n\nBefore we dive in and import it, we need to make sure our data is in a sensible place.\n\n1. Open RStudio and open the project you created in day 1 (if not already opened).\n\n2. Then, save the example data [`walkingspeed_msc.xlsx`](`walkingspeed_msc.xlsx`) for this tutorial into your project folder.  Check that it has appeared in the 'files' pane in RStudio.\n\n3. Start a new script file that will eventually include all of the commands we need to import, clean, visualise and analyse the data.\n\n4. Now open the dataset in Excel and explore the file so that you understand what is there.\n\n## Read the help!\n\nWe are nearly ready to import our data.  But remember that before using a new function its always good to read its documentation.  The `read_excel()` function has a few different options so first we should look at the help file:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\n?read_excel\n```\n:::\n\n\nNote from the help file that `read_excel()` can extract data from different sheets and ranges of an Excel workbook, can use or ignore column names, and allows you to specify the type of data (numeric, dates, text etc) if you want to, or leave it to R to guess.\n\nMany R packages also have vignettes or websites including simpler guides to their use in specific cases.  `readxl` has a website that you might find helpful:  [https://readxl.tidyverse.org/](https://readxl.tidyverse.org/)\n\nNow we’ll load the data.  We want to use the ‘walking speed’ data from the `walkingspeed_msc.xlsx` spreadsheet. \n\n* Open the spreadsheet in Excel and find this sheet.  The data we want is in the sheet called 'day2'.\n\nFrom the `read_excel()` help file we can deduce the syntax to load this data into R:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nwalkingdat <- read_excel(path=\"walkingspeed_msc.xlsx\", sheet=\"day2\")\n```\n:::\n\n\nThis line assumes that the file `walkingspeed_msc.xlsx` is in the current working directory (you can check what this is with `getwd()`).  The current working directory is shown just above the R console window.  You can see the files in the current working directory in the 'Files' tab on the bottom right of the RStudio window.  When you create or load a project RStudio will set the working directory to the root of the project directory.\n\nThis line calls the `read_excel()` function, with the arguments `path`, `sheet` set.  The other arguments will be set to their default values, which you can see from the help file.  \n\nWe could have set the range of the data in the spreadsheet (I usually do this for safety), but `read_excel()` can figure it out automatically most of the time; by default it picks the biggest continuous chunk of data starting in the top left of the sheet.\n\nNow you should have a ‘data frame’ object called `walkingdat` in your environment, which includes the data from the Excel sheet ready to process and analyse.\n\n# Cleaning\n\nBefore we can analyse our data we should check each variable to make sure that it looks OK.\n\nWe'll use functions from day 1 to explore the content and structure of the dataset, and the distributions of the main variables.  We can then address any problems that we find.\n\nRecall these functions from the day 1 notes.  We are checking that the variables have the correct type, and the distributions of the categorical variables.  \n\nThis is an important aspect of any data analysis and we must not skip this step.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nstr(walkingdat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [135 × 6] (S3: tbl_df/tbl/data.frame)\n $ patid     : num [1:135] 1 2 3 4 5 6 7 8 9 10 ...\n $ group     : chr [1:135] \"treat\" \"control\" \"treat\" \"control\" ...\n $ time      : num [1:135] 1.9 3.54 2.93 1.82 2.2 ...\n $ sex       : chr [1:135] \"M\" \"M\" \"M\" \"M\" ...\n $ age       : chr [1:135] \"Don't know\" \"61\" \"65\" \"48\" ...\n $ department: num [1:135] 3 3 1 2 2 4 2 4 3 2 ...\n```\n:::\n\n```{.r .cell-code}\nsummary(walkingdat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     patid           group                time             sex           \n Min.   :  1.00   Length:135         Min.   :  0.000   Length:135        \n 1st Qu.: 34.50   Class :character   1st Qu.:  2.167   Class :character  \n Median : 68.00   Mode  :character   Median :  2.426   Mode  :character  \n Mean   : 68.01                      Mean   :  4.175                     \n 3rd Qu.:101.50                      3rd Qu.:  2.949                     \n Max.   :136.00                      Max.   :185.362                     \n     age              department   \n Length:135         Min.   :1.000  \n Class :character   1st Qu.:2.000  \n Mode  :character   Median :3.000  \n                    Mean   :2.607  \n                    3rd Qu.:3.500  \n                    Max.   :4.000  \n```\n:::\n\n```{.r .cell-code}\nclass(walkingdat$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\ntable(walkingdat$group)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\ncontrol   treat \n     68      67 \n```\n:::\n\n```{.r .cell-code}\ntable(walkingdat$sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  F   M \n 35 100 \n```\n:::\n\n```{.r .cell-code}\ntable(walkingdat$department)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n 1  2  3  4 \n28 31 42 34 \n```\n:::\n:::\n\n\nYou will have noticed that one of the numerical variables, age, has been loaded as character variable and not a numeric.  \n\nWe cannot do anaysis with a character variable!\n\nWhy do you think the variable is imported as character and not numeric?\n\nWe can convert age to a numeric using `as.numeric`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Tidyverse version:\nwalkingdat <- walkingdat |> mutate(age = as.numeric(age))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `age = as.numeric(age)`.\nCaused by warning:\n! NAs introduced by coercion\n```\n:::\n\n```{.r .cell-code}\n# Base R version:\nwalkingdat$age <- as.numeric(walkingdat$age)\n```\n:::\n\n\nWhat warning message did you get when you converted this variable?  What does it mean?\n\nHow might we check on the age and time variables to see if the distribution looks OK?\n\nCan you remember the code to make descriptive statistics and basic plots?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(walkingdat$age)\n```\n\n::: {.cell-output-display}\n![](day2MSc_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\nhist(walkingdat$time)\n```\n\n::: {.cell-output-display}\n![](day2MSc_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n\n```{.r .cell-code}\nrange(walkingdat$age, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 47 72\n```\n:::\n\n```{.r .cell-code}\nrange(walkingdat$time, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   0.000 185.362\n```\n:::\n:::\n\n\n\n## Dealing with outliers\n\nIt looks like there are some unreasonably high and low values of walking time.  \n\nWe can make another graph of walking speed against age, this time on a logarithmic scale so both the extreme high and extreme low points are visible, to see what is going on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## base R version\nplot(walkingdat$age, walkingdat$time, log=\"y\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in xy.coords(x, y, xlabel, ylabel, log): 1 y value <= 0 omitted from\nlogarithmic plot\n```\n:::\n\n::: {.cell-output-display}\n![](day2MSc_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n## ggplot2 version\nlibrary(ggplot2)\nggplot(data = walkingdat) + aes(x=age, y=time) + geom_point() + scale_y_log10()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in scale_y_log10(): log-10 transformation introduced infinite values.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](day2MSc_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n:::\n\n\n\nIt seems there are some values for time that are likely to be technical errors.  We can remove these values (set them to missing) in a few different ways:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## base R method to replace the values with NA ('missing')\nwalkingdat$time[walkingdat$time<0.1] <- NA\nwalkingdat$time[walkingdat$time>100] <- NA\n\n## Using filter we could remove those datapoints\nwalkingdat <- walkingdat |> filter(time < 100) |> filter(time > 0.1)\n\n\n# Now check the distribution of time again.\nhist(walkingdat$time, breaks=100)\n```\n\n::: {.cell-output-display}\n![](day2MSc_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\nrange(walkingdat$time, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1.435 17.641\n```\n:::\n:::\n\n\nNow we have a cleaned dataset in our environment we can proceed with our visualisation and analysis:\n\n# Analysis - Exercises\n\nAdd commands to your script file to answer the following questions.  Add comments (lines beginning with `#` to help you remember what you did and why!).\n\nSome solutions are posted at the bottom of the page, but it will help you a lot to try to answer them on your own, by discussing with colleagues, or by looking up help online before using the solutions.\n\nIf you don't understand the given solution, then please ask and we can go through it in the class.\n\nWe will discuss the testing, modelling and graphing elements in more detail on day 3, but it would be helpful to attempt these today.\n\n1. Structure of the dataset\n    a. What are the names of the variables that comprise the `walkingdata` dataframe?\n    a. What is the class of each?\n    a. How many columns and rows does it have?\n\n1. Descriptive statistics\n    a. What is the age of youngest patient? \n    a. What is the age of the oldest patient? \n    a. Are the oldest and youngest patient male or female?\n\n1. Cross-tabulation\n    a. How many Male and Female patients are there?\n    a. Is the sex ratio balanced between treatment groups?\n    a. How many women are there of age under 50? How many men are there of age under 50?\n\n1.  Descriptive statistics using a subset of the data\n    a. What is the average walking speed for men between 50 and 60 years of age?\n\n1.  Deriving new variables\n    a. Create a new column that will have the speed of walking, that is 1/time.\n    a. Create a new column that will have the time rounded up to nearest 10th of a second.\n\n## Graphics\n\n1.  Graphing\n    a. Consider what kind of graph you might make to illustrate the difference in walking speed between treatment groups, and try to make it using ggplot. Eg:\n    a. Make a box plot of time by sex, with a different coloured box per sex\n    a. Label the axes appropriately\n    a. Try a violin plot instead of a boxplot (with geom_violin).  Which do you prefer?\n    a. Make any other adjustments you think are informative!\n\n## Modelling\n\nI have left these sections in from the PhD workshop.  Attempt them if you get time.\n\n1.  Hypothesis Testing\n    a. What is the difference in average walking speed between control patients and treated patients?\n    a. Is this difference statistically significant? Use t-test `t.test()` and Mann-Whitney tests `wilcox.test()` to examine the differences between the groups.  Look up the syntax for `t.test()` and `wilcox.test()` using the help system, and use them to check whether the time taken to complete the task varies by treatment status.  In each case use the version of the function that takes a `formula` agument. Remember the `formula` syntax from the `boxplot` and `lm` functions in day 1.\n    a. Compare the p-values for each method.\n    a. Consider the assumptions for a t-test, and whether they are met in this dataset.  \n    a. Do you believe that treatment affects walking speed?\n\n1.  Linear model diagnostics\n    a. Estimate a linear model (with `lm`) to estimate/test the effect of treatment on task completion time.\n    a. Use `summary` to get the model coefficients and p-values\n    a. Use `broom::tidy` to get the model coefficients and p-values\n    a. Compare the model results to the equivalent t-test\n    a. Extend the model to include the effects of age and sex as potential covariates.\n    a. Use `plot()` to explore the model diagnostics\n    a. Use `performance::check_model()` to explore the model diagnostics\n    a. Now estimate a new model to compare the task completion speed between groups.\n    a. Get the model coefficients and p-values\n    a. Check the model diagnostics using `plot` or `performance::check_model`\n    a. Why are the result from this model different?  How do you interpret the results?\n    a. Can you get the confidence intervals for the treatment effect (use the help for `broom::tidy`)\n    a. Use `model_summary` package to make a pretty model summary table\n\n\n# Solutions\n\nThe exercises will have many possible solutions, under each exercise we have listed a few possible answers.  Most are possible using the functions we have introduced in day 1 of the course, or with functions I suggest in the questions, but in some cases there are other solutions that I have given using different functions/packages.\n\nIf you answered the questions another way then that's fine, but do try to understand how the given solutions work.\n\n### Structure of the dataset\n\n*What are the names of the variables that comprise the `walkingdat` dataframe?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n# Eg\nstr(walkingdat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [132 × 6] (S3: tbl_df/tbl/data.frame)\n $ patid     : num [1:132] 1 2 3 4 5 6 7 8 9 10 ...\n $ group     : chr [1:132] \"treat\" \"control\" \"treat\" \"control\" ...\n $ time      : num [1:132] 1.9 3.54 2.93 1.82 2.2 ...\n $ sex       : chr [1:132] \"M\" \"M\" \"M\" \"M\" ...\n $ age       : num [1:132] NA 61 65 48 62 62 57 57 57 55 ...\n $ department: num [1:132] 3 3 1 2 2 4 2 4 3 2 ...\n```\n:::\n\n```{.r .cell-code}\nnames(walkingdat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"patid\"      \"group\"      \"time\"       \"sex\"        \"age\"       \n[6] \"department\"\n```\n:::\n\n```{.r .cell-code}\nsummary(walkingdat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     patid           group                time            sex           \n Min.   :  1.00   Length:132         Min.   : 1.435   Length:132        \n 1st Qu.: 35.75   Class :character   1st Qu.: 2.169   Class :character  \n Median : 69.50   Mode  :character   Median : 2.428   Mode  :character  \n Mean   : 68.82                      Mean   : 2.866                     \n 3rd Qu.:102.25                      3rd Qu.: 2.944                     \n Max.   :136.00                      Max.   :17.641                     \n                                                                        \n      age          department   \n Min.   :47.00   Min.   :1.000  \n 1st Qu.:54.00   1st Qu.:2.000  \n Median :57.00   Median :3.000  \n Mean   :57.69   Mean   :2.583  \n 3rd Qu.:60.50   3rd Qu.:3.000  \n Max.   :72.00   Max.   :4.000  \n NA's   :1                      \n```\n:::\n:::\n\n\n*What is the class of each?  What is the class of `walkingdat`?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(walkingdat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [132 × 6] (S3: tbl_df/tbl/data.frame)\n $ patid     : num [1:132] 1 2 3 4 5 6 7 8 9 10 ...\n $ group     : chr [1:132] \"treat\" \"control\" \"treat\" \"control\" ...\n $ time      : num [1:132] 1.9 3.54 2.93 1.82 2.2 ...\n $ sex       : chr [1:132] \"M\" \"M\" \"M\" \"M\" ...\n $ age       : num [1:132] NA 61 65 48 62 62 57 57 57 55 ...\n $ department: num [1:132] 3 3 1 2 2 4 2 4 3 2 ...\n```\n:::\n\n```{.r .cell-code}\nlapply(walkingdat, class)  #  'lapply' takes a list (first argument) and applies a function (second argument) to every element of that list.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$patid\n[1] \"numeric\"\n\n$group\n[1] \"character\"\n\n$time\n[1] \"numeric\"\n\n$sex\n[1] \"character\"\n\n$age\n[1] \"numeric\"\n\n$department\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nwalkingdat |> map(class) # map is the tidyverse version of lapply.  It is in the 'purrr' package which is loaded when you library(tidyverse).\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$patid\n[1] \"numeric\"\n\n$group\n[1] \"character\"\n\n$time\n[1] \"numeric\"\n\n$sex\n[1] \"character\"\n\n$age\n[1] \"numeric\"\n\n$department\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(walkingdat) # walkingdat is a dataframe, but it is also a `tbl` which is a datframe with a few tidyverse enhancements.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n:::\n\n\n#. How many columns and rows does `walkingdat` have?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(walkingdat) # Get the dimension\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 132   6\n```\n:::\n\n```{.r .cell-code}\nnrow(walkingdat) # Get the number of rows\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 132\n```\n:::\n\n```{.r .cell-code}\nlength(walkingdat) # The 'length' of a data frame is the numve\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n:::\n\n\n### Descriptive statistics\n\n*What is the age of youngest patient?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# look at the help for what na.rm does.  You'll see many of the summary statistics need this.\nmin(walkingdat$age, na.rm=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 47\n```\n:::\n\n```{.r .cell-code}\nwalkingdat |> summarize(min(age, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  `min(age, na.rm = TRUE)`\n                     <dbl>\n1                       47\n```\n:::\n\n```{.r .cell-code}\nwalkingdat |> select(age) |> min(na.rm=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 47\n```\n:::\n:::\n\n\n*What is the age of the oldest patient?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax(walkingdat$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nwalkingdat |> summarize(max(age, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  `max(age, na.rm = TRUE)`\n                     <dbl>\n1                       72\n```\n:::\n\n```{.r .cell-code}\nwalkingdat |> select(age) |> max(na.rm=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 72\n```\n:::\n\n```{.r .cell-code}\nrange(walkingdat$age, na.rm=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 47 72\n```\n:::\n\n```{.r .cell-code}\nsummary(walkingdat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     patid           group                time            sex           \n Min.   :  1.00   Length:132         Min.   : 1.435   Length:132        \n 1st Qu.: 35.75   Class :character   1st Qu.: 2.169   Class :character  \n Median : 69.50   Mode  :character   Median : 2.428   Mode  :character  \n Mean   : 68.82                      Mean   : 2.866                     \n 3rd Qu.:102.25                      3rd Qu.: 2.944                     \n Max.   :136.00                      Max.   :17.641                     \n                                                                        \n      age          department   \n Min.   :47.00   Min.   :1.000  \n 1st Qu.:54.00   1st Qu.:2.000  \n Median :57.00   Median :3.000  \n Mean   :57.69   Mean   :2.583  \n 3rd Qu.:60.50   3rd Qu.:3.000  \n Max.   :72.00   Max.   :4.000  \n NA's   :1                      \n```\n:::\n:::\n\n\n*Are the oldest and youngest patient male or female?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwalkingdat |> filter(age==47)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 6\n  patid group    time sex     age department\n  <dbl> <chr>   <dbl> <chr> <dbl>      <dbl>\n1   128 control  2.87 F        47          1\n```\n:::\n\n```{.r .cell-code}\nwalkingdat |> filter(age==72)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  patid group    time sex     age department\n  <dbl> <chr>   <dbl> <chr> <dbl>      <dbl>\n1    20 control  5.42 M        72          2\n2    62 control 12.2  M        72          2\n```\n:::\n\n```{.r .cell-code}\nwalkingdat[which.max(walkingdat$age), \"sex\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  sex  \n  <chr>\n1 M    \n```\n:::\n\n```{.r .cell-code}\nwalkingdat[which.min(walkingdat$age), \"sex\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  sex  \n  <chr>\n1 F    \n```\n:::\n:::\n\n\n### Cross-tabulation\n\n*How many Male and Female patient are there?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwalkingdat |> filter( sex =='F' ) |> count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n      n\n  <int>\n1    35\n```\n:::\n\n```{.r .cell-code}\nwalkingdat |> filter( sex =='M' ) |> count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n      n\n  <int>\n1    97\n```\n:::\n\n```{.r .cell-code}\ntable(walkingdat$sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n F  M \n35 97 \n```\n:::\n\n```{.r .cell-code}\nwalkingdat |> group_by(sex) |> count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n# Groups:   sex [2]\n  sex       n\n  <chr> <int>\n1 F        35\n2 M        97\n```\n:::\n:::\n\n\n*Is the sex ratio balanced between treatment groups?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwalkingdat |> filter( group =='treat', sex =='M' ) |> count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n      n\n  <int>\n1    49\n```\n:::\n\n```{.r .cell-code}\nwalkingdat |> filter( group =='treat', sex =='F' ) |> count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n      n\n  <int>\n1    17\n```\n:::\n:::\n\n\n*How many women are there of age under 50? How many men are there of age under 50?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwalkingdat |> filter(age < 50 , sex =='F' ) |>  count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n      n\n  <int>\n1     4\n```\n:::\n\n```{.r .cell-code}\nwalkingdat |> filter(age < 50 , sex =='M' ) |>  count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n      n\n  <int>\n1     2\n```\n:::\n\n```{.r .cell-code}\ntable(walkingdat$sex, walkingdat$age<50)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   \n    FALSE TRUE\n  F    31    4\n  M    94    2\n```\n:::\n:::\n\n\n### Descriptive statistics using a subset of the data\n\n*What is the average walking speed for men between 60 and 70 years of age?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwalkingdat |> filter(age >59, age <71,  sex =='M' )  |> \n  select(time) |> pull() |> mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.129875\n```\n:::\n\n```{.r .cell-code}\nwalkingdat |> filter( age >59, age <71,  sex =='M' ) |> \n  summarise(mean(time))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  `mean(time)`\n         <dbl>\n1         3.13\n```\n:::\n:::\n\n\n\n### Deriving new variables\n\n*Create a new column that will have the speed of walking, that is 1/time.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwalkingdat <- walkingdat |> mutate(speed=1/as.numeric(time))\n```\n:::\n\n\n*Create a new column that will have the time rounded to the nearest 10th of a second.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwalkingdat <- walkingdat |> mutate(rounded=round(as.numeric(time), digits = 2))\n```\n:::\n\n\n### Graphing\n\n*Consider what kind of graph you might make to illustrate the difference in walking speed between treatment groups, and try to make it using ggplot.*\n\n*Make a scatter plot of time vs age*\n*Make the colour of each point reflect the treatment group*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=walkingdat) +\n  aes(x=age,y=time,colour=group) + \n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](day2MSc_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n*Make a box plot of time by sex, with a different coloured box per sex*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=walkingdat) +\n  aes(x=sex,y=time,fill=sex) + \n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](day2MSc_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n*Label the axes appropriately*\n\nggplot(data=walkingdat) +\n  aes(x=sex,y=time,fill=sex) + \n  geom_boxplot() + \n  labs(x=\"Sex\", y=\"Time to complete task (s)\")\n\n*Try a violin plot instead of a boxplot (with geom_violin).  Which do you prefer?*\n*Make any other adjustments you think are informative!*\n\n\n\n### Hypothesis testing\n\n*What is the difference in task completion time between control patients and treated patients?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm( time ~ group , data=walkingdat) |> broom::tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  <chr>          <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)    3.12      0.228     13.7  6.23e-27\n2 grouptreat    -0.512     0.323     -1.58 1.15e- 1\n```\n:::\n\n```{.r .cell-code}\nlm( time ~ group , data=walkingdat) |> summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = time ~ group, data = walkingdat)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.6273 -0.7324 -0.4007  0.0606 15.0313 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   3.1213     0.2283  13.675   <2e-16 ***\ngrouptreat   -0.5116     0.3228  -1.585    0.115    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.854 on 130 degrees of freedom\nMultiple R-squared:  0.01895,\tAdjusted R-squared:  0.01141 \nF-statistic: 2.512 on 1 and 130 DF,  p-value: 0.1154\n```\n:::\n:::\n\n\n*Is this difference statistically significant?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm( time ~ group , data=walkingdat) |> anova()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nResponse: time\n           Df Sum Sq Mean Sq F value Pr(>F)\ngroup       1   8.64  8.6364  2.5116 0.1154\nResiduals 130 447.03  3.4387               \n```\n:::\n:::\n\n\n*Use t-test `t.test()` and Mann-Whitney tests `wilcox.test()` to examine the differences between the groups.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt.test( time ~ group , data=walkingdat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tWelch Two Sample t-test\n\ndata:  time by group\nt = 1.5848, df = 126.66, p-value = 0.1155\nalternative hypothesis: true difference in means between group control and group treat is not equal to 0\n95 percent confidence interval:\n -0.1272116  1.1503631\nsample estimates:\nmean in group control   mean in group treat \n             3.121303              2.609727 \n```\n:::\n\n```{.r .cell-code}\nwilcox.test( time ~ group , data=walkingdat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tWilcoxon rank sum test with continuity correction\n\ndata:  time by group\nW = 3054, p-value = 6.761e-05\nalternative hypothesis: true location shift is not equal to 0\n```\n:::\n:::\n\n\n*. Consider the assumptions underlying the t-test, and whether they are met in this dataset*\n\nThe t-test and the linear model assume that the outcome variable is normally distributed within groups, which is not the case here.  So the results from these is probably wrong.\n\nThe Mann-Whitney test (Wilcox test) does not make this assumption, and is more robust in this case.\n\n*Do you believe that treatment affects walking speed?*\n\n*Try the t-test or linear model using the speed variable that you created instead of the time variable that is in the dataset.*\n\n\n### Diagnostics\n\n*Estimate a linear model (with `lm`) to estimate/test the effect of treatment on task completion time.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod1 <- lm(data=walkingdat , time ~ group)\n```\n:::\n\n\n*Use `summary` to get the model coefficients and p-values*\n*Use `broom::tidy` to get the model coefficients and p-values*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod1 |> summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = time ~ group, data = walkingdat)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.6273 -0.7324 -0.4007  0.0606 15.0313 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   3.1213     0.2283  13.675   <2e-16 ***\ngrouptreat   -0.5116     0.3228  -1.585    0.115    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.854 on 130 degrees of freedom\nMultiple R-squared:  0.01895,\tAdjusted R-squared:  0.01141 \nF-statistic: 2.512 on 1 and 130 DF,  p-value: 0.1154\n```\n:::\n\n```{.r .cell-code}\nmod1 |> broom::tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  <chr>          <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)    3.12      0.228     13.7  6.23e-27\n2 grouptreat    -0.512     0.323     -1.58 1.15e- 1\n```\n:::\n:::\n\n\n\n*Compare the model results to the equivalent t-test*\n*Extend the model to include the effects of age and sex as potential covariates.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod2 <- lm(data=walkingdat , time ~ group + age + sex)\n```\n:::\n\n\n*Use `plot()` to explore the model diagnostics*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## You could plot model 1 or model 2.\nplot(mod1)\n```\n\n::: {.cell-output-display}\n![](day2MSc_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](day2MSc_files/figure-html/unnamed-chunk-28-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](day2MSc_files/figure-html/unnamed-chunk-28-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](day2MSc_files/figure-html/unnamed-chunk-28-4.png){width=672}\n:::\n:::\n\n\n*Use `performance::check_model` to explore the model diagnostics*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nperformance::check_model(mod1)\n```\n\n::: {.cell-output-display}\n![](day2MSc_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n*Now estimate a new model to compare the task completion speed between groups.*\n*Get the model coefficients and p-values*\n*Check the model diagnostics using `plot` or `performance::check_model`*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwalkingdat$speed <- 1/walkingdat$time\nmod3 <- lm(data=walkingdat , speed ~ group + age + sex)\nperformance::check_model(mod3)\n```\n\n::: {.cell-output-display}\n![](day2MSc_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n    a. Why are the result from this model different?  How do you interpret the results?\n    a. Can you get the confidence intervals for the treatment effect (use the help for `broom::tidy`)\n    a. Use `model_summary` package to make a pretty model summary table\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelsummary::modelsummary(mod3)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\">  (1) </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> (Intercept) </td>\n   <td style=\"text-align:center;\"> 0.607 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (0.105) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> grouptreat </td>\n   <td style=\"text-align:center;\"> 0.071 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (0.018) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> age </td>\n   <td style=\"text-align:center;\"> −0.004 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (0.002) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> sexM </td>\n   <td style=\"text-align:center;\"> −0.010 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;box-shadow: 0px 1.5px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1.5px\"> (0.022) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Num.Obs. </td>\n   <td style=\"text-align:center;\"> 131 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R2 </td>\n   <td style=\"text-align:center;\"> 0.142 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R2 Adj. </td>\n   <td style=\"text-align:center;\"> 0.122 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> AIC </td>\n   <td style=\"text-align:center;\"> −215.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> BIC </td>\n   <td style=\"text-align:center;\"> −200.6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Log.Lik. </td>\n   <td style=\"text-align:center;\"> 112.511 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> RMSE </td>\n   <td style=\"text-align:center;\"> 0.10 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n\n```{.r .cell-code}\n## I didn't do very well!\nmodelsummary::modelsummary(mod3 , \n                           estimate=\"{estimate} [{conf.low}, {conf.high}] {stars}\", \n                           coef_rename = c('(Intercept)'=\"Intercept\", \n                                           'grouptreat'=\"Treatment\", \n                                           'age'=\"Age (per year)\", \n                                           'sexM'=\"Male vs Female\"), \n                           statistic=NULL, )\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\">  (1) </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Intercept </td>\n   <td style=\"text-align:center;\"> 0.607 [0.398, 0.815] *** </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Treatment </td>\n   <td style=\"text-align:center;\"> 0.071 [0.035, 0.107] *** </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Age (per year) </td>\n   <td style=\"text-align:center;\"> −0.004 [−0.008, 0.000] * </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;box-shadow: 0px 1.5px\"> Male vs Female </td>\n   <td style=\"text-align:center;box-shadow: 0px 1.5px\"> −0.010 [−0.054, 0.034] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Num.Obs. </td>\n   <td style=\"text-align:center;\"> 131 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R2 </td>\n   <td style=\"text-align:center;\"> 0.142 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R2 Adj. </td>\n   <td style=\"text-align:center;\"> 0.122 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> AIC </td>\n   <td style=\"text-align:center;\"> −215.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> BIC </td>\n   <td style=\"text-align:center;\"> −200.6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Log.Lik. </td>\n   <td style=\"text-align:center;\"> 112.511 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> RMSE </td>\n   <td style=\"text-align:center;\"> 0.10 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n",
    "supporting": [
      "day2MSc_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}