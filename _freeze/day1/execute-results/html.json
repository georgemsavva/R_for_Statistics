{
  "hash": "42bae90d0bd10d0e6cfc0a9e346fb8e4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to ‘R’ for statistical analysis\"\ndate: April 2024\nauthor: \n  - George Savva, QIB\n  - Pirita Paajanen, JIC\nalways_allow_html: true\nformat:\n  html:\n    theme: cosmo\n    toc: true\n    toc-depth: 2\n    smooth-scroll: true\n    number-sections: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# Introduction\n\nThis course will introduce \n\n* R and RStudio statistical software\n* Examples of performing common tasks in scientific data analysis\n    + Loading data\n    + Descriptive analysis\n    + Basic testing and modelling\n    + Making graphics\n* Where to go for further support\n\nThe aim is to become familiar with the R/RStudio environment and some common functions and workflows.  This will enable you to learn the specific functions that you need on your own or with further training.\n\nPowerpoint slides for today's session are here:\n\n* [Day 1 slides](day1.pptx)\n\nThis handout was written in RStudio using the Quarto document preparation system.  The source code is here: [day1.qmd](day1.qmd)\n\n## Learning objectives\n\nWe will focus on the tasks used in a typical analysis of a single scientific dataset, mirroring the tasks usually conducted in other statistical software.\n\n### Specific tasks:\n\n\nDay 1:  R and RStudio basics\n\n*\tFamiliarity with R and RStudio\n* The R language and R scripts\n*\tExploring data and calculating descriptive statistics using example data\n\nDay 2/3:  Importing data, cleaning, coding and typical analysis workflow\n\n* Revise and consolidate day 1 learning\n* Loading and wrangling data\n*\tSimple hypothesis tests\n* Estimating, diagnosing and interpreting linear models\n* Making graphs using the ggplot2 package\n\n# R and RStudio\n\n## What are R and RStudio?\n\n**R** is a free and open source statistics package, initially developed during the 1990s, and that has now become the world’s most widely used and comprehensive statistical software.  R calls itself a *programming language and environment for statistic computing*.  \n\nThat is, 'R' refers both to the software itself and the programming language that you use to interact with it.\n\n**RStudio** is a free open source integrated development environment (IDE) for R that makes working R much easier.  Most R users use RStudio and we recommend using RStudio for new users.\n\nThe great strength of R is in its contributed packages, these are community written add-ons that make R much more powerful and easy to use.  We will introduce some commonly used packages for data management, analysis and graphing during this course.\n\n## Getting R and RStudio\n\n*  If you are using a PC in the JIC IT training suite it will already have an up-to-date version of R and RStudio.  \n\n*  For other NBI managed devices you can install R and RStudio from the NBI software catalogue.\n\n*  If you want to install R and RStudio on your own device:\n\n    1. Download and install the latest version of R from <https://cran.r-project.org/>\n\n    2. Then download and install RStudio from <https://www.rstudio.com/>\n\n## Starting RStudio\n\nStart RStudio.  It will detect your installation of R, and you should see a screen like this:\n\n![Figure:  RStudio Window](./rstudio.PNG)\n\nOn the left is the console window, where you type commands and see output.  The windows on the right hold various useful tabs, including your data, graphs, help files, and your command history.\n\n## Check R and RStudio are working, run your first command\n\n\n1. Click in the console window and type:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1+2\n```\n:::\n\n\n\n\nPress return on your keyboard.  You should see: \n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\n2. Try a few other mathematical functions at the R console (eg):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsin(pi/2)\nlog(10)\nexp(2)\n1e4\n1/0\n```\n:::\n\n\n\n\nDo you understand the output from each of these commands?\n\n# Using projects and scripts\n\nBefore we go any further, we are going to start an RStudio ‘project’ to organise our work during this course. Using projects helps us to keep all of the data and analysis for a particular piece of work in the same place.\n\n* Click on ‘New &rarr; New project’ in the main toolbar.  \n* Click ‘Start a new project in a brand new working directory’.  \n* Finally click ‘new project’ on the next screen.\n\nNow you can choose where to create the new directory for your R project, and what to call it.  \n\n* Make a project called ‘Rtraining’ or something like that, somewhere in your *personal filestore* (U drive).\n\n* **If you are not comfortable making directories and working with files in your personal filestore, we'll fix that now because it's important!**\n\nNow, when you return to the main RStudio window you are working within your project.  Notice that:\n\n* The 'working directory' has automatically switched to the new directory that you created.\n* The 'files' tab on the bottom left of the window is now showing the root of the project directory.\n\nIn practice an RStudio project directory should include all of the data files, source files and generated results corresponding to an analysis project.  Eg for each paper I work on I tend to keep an RStudio project including all of the data files and scripts for that project.  Using projects also help you to work with version control systems (like Github).\n\n## Making a script\n\nWe could do everything by typing commands into the console window as we have already seen, but this is not good if we want to remember or repeat something we have done, or share it with others.\n\nSo instead we will type our commands into files called R *scripts* and run the commands from there.  With a script you can run and re-run bigger analyses that chain together all the functions you need for data loading, cleaning, analysing, reporting etc.  R scripts have the file extension \n\nUsing scripts mean we can develop complex analyses, and that when we come back to them later, eg if something changes in our data that means we need to redo everything, or we want to tweak something in our analysis because of a reviewer's comment, we can easily do this.  \n\n::: {.callout-tip title=\"Always use a project, and keep scripts tidy!\"}\n\nIt is good to keep a separate R script for each analysis that you do, such that each starts with the functions to load the required data, then do any cleaning or coding that is necessary, then to perform and report the data analysis.\n\nIf you start making more complex projects you may want to write separate scripts for each of these elements.\n\n:::\n\n### Look at some example R scripts\n\nAn example R script, annotated with comments, is in the files that accompany this handout.  Let's look at it now:\n\n* [Example R script](exampleScript.R)\n\nLoad this script in R studio and practice running lines one at a time, or 'sourcing' the whole script all at once (see the section below for how to do this).\n\nThere is a second R script, including an analysis of the `iris` dataset that we'll use today:\n\n* [Iris analysis R script](irisScript.R)\n\nThe iris script has also been 'spun' into a report, which you can see here:\n\n* [Iris report](irisScript.qmd)\n\nWe won't cover making reports, websites or presentations in this course, but you should look into the Quarto system if you are interested.\n\n### Make a new script\n\n1. Make a new script.  Click on File &rarr; New File &rarr; R Script in the main RStudio window.  An empty file will appear in the top-left pane.\n\n2. Save your script with a sensible filename (even though it is empty).  Having unsaved scripts is a bad idea, RStudio is sometimes unstable and while it will try to recover unsaved work it is not always guaranteed to.  Get into the habit of saving your scripts regularly.  Make sure it has the file extension `.R`\n\n3. Put some of the mathematical functions that you have already tried into your script, with one on each line.\n\nYou can now run code from scripts in several ways.  Try each of these:\n\n1. Press 'run' or type Ctrl+Enter on the keyboard, RStudio will send the line that the cursor is on to the R console and will run it.\n\n2. If you highlight an area of the script and then hit 'run' (or press Ctrl+Enter) then RStudio will send all the highlighted code to the R console.\n\n3. If you save the file, then press 'source', R will load the file from disk and run all the commands from that file in sequence.\n\nIf you have your raw data saved, and you keep your scripts, then you don’t need to save your results or any of the variables that you generated or modified during your analysis.  So long as the original data doesn’t change, running the script will reproduce all of your analysis and output.  This is usually a better way of working than trying to save your environment with all of your results and tables in.\n\nSee also:\n\n* <https://kdestasio.github.io/post/r_best_practices/>\n* <https://r4ds.had.co.nz/workflow-projects.html>\n* <https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects>\n* <https://rstats.wtf>\n\nfor more information on using projects and scripts\n\nFor more complex projects you might be interested in using a pipeline tool such like `targets` to help keep your work organised, particularly if you are running analyses in multiple stages with some elements taking a long time.\n\n* <https://books.ropensci.org/targets/>\n\n# Objects and functions\n\nSo far we have used R as a calculator.  Next we'll see how R stores objects and applies functions to data.  \n\n\n(Optional - a tutorial on packages, function and pipes using the `cowsay`, `praise` and `spongebob` packages.) [Objects, functions, packages and pipes tutorial](praise.qmd)\n\n## Functions\n\nEverything in R is done by executing ‘functions’.  When you typed `1+2` at the console above you were calling the `+` function, with `1` and `2` as its arguments, and the result was printed in the console window.\n\nSimple mathematical functions can be written using standard notation in this way (eg `1+2` or `3/4`) but functions are more commonly called by their *name*, with their *arguments* in brackets, separated by commas.  For example, to get say the logarithm (base 10) of 100, we would type\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Try this directly in the console, and by running it from your new script.\nlog(x=100, base=10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\nHere, `log` is the name of the function, with `x` and `base` its arguments.  The result is the *value* of the function (the value is what is returned).\n\n* Try each of the following commands.  Do you understand what they do any why?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### From now on, keep everything you try in a script file.\n\nlog(x=100, base=10)\nlog(x=100)\nlog(base=10, x=100)\n\nlog(100,10)\nlog(10,100)\n\n1000 |> log()           #  Note the use of the pipe operator |> as an alternative way to call a function. \n100 |> log(base=10)\n\nlog()\nlog\n```\n:::\n\n\n\n\n### Getting help\n\nLet's find out why the `log` command we used in the last section worked the way it did.  In the console, type: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?log\n```\n:::\n\n\n\n\nto read the help file for the `log` function.  All R help files are structured in a similar way, so it's useful to understand this now for a simple function like `log`.  \n\nLook at the `Usage`,  `Arguments` and `Value` sections.  These will be invaluable when you come to use R and use functions that you do not already know.\n\n## Objects\n\nInstead of directly displaying the value of the function (‘value’ is what R calls the result of a function), you can give it a name and store it for later use:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = 1+2\n```\n:::\n\n\n\n\nor\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1+2\n```\n:::\n\n\n\n\nThis does exactly the same thing; some R users use the arrow `<-` instead of `=` for assignment, so both forms will come up when you’re looking at help files or other people’s code.  I (annoyingly!) tend to use either interchangeably.\n\nNow you have an object called `x` in your *environment* that holds the number 3 (check your environment window).  You can ask R to display the value of ‘x’ by just entering x (just entering the name of an object *prints* that object):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n:::\n\n\n\n\nOr you could do something else with `x`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx*2\nlog(x)\nx |> log()\nx |> log(10)\n```\n:::\n\n\n\n\nWhat does this do?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx |> log() |> sqrt()\n```\n:::\n\n\n\n\nHint:  it might help to understand if you read the pipe operator `|>` as \"and then...\"\n\nTo see the *class* of an object (what kind of thing is stored in the object), use the `class()` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(x)\n```\n:::\n\n\n\n\nObjects of different classes store different kinds of information.  We will come across objects of different classes later.\n\n## Test yourself\n\n1.  Make a new object called y which has the value of x+3.  Then display y.\n2.\tNow change the value of x (eg using  `x <- 6` ).  Does the value of y change?\n3.\tObjects can hold text strings instead of numbers.  Try:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyname <- \"George\"  # (or whatever your name is).\nmyname\n```\n:::\n\n\n\n\nWhat is the class of the ‘myname’ object?\n\n4.\t(Difficult!)  Look up the function to turn a text string into upper case (an internet search will help you).  Use this function to make a new object which has the same text as ‘myname’ but in upper case.\n\n# Using R to analyse data\n\nWe can R as a simple calculator like this but we'll most often be using R to analyse datasets.\n\nWe'll load a simple dataset into R, and do some analysis.\n\n::: {.callout-note}\nThere are two types of statistical analysis:\n\n*Descriptive* statistics are used to describe the sample.\n\nWe use *analytic* (or *inferential*) statistics to test our hypotheses, estimate treatment effects and learn about populations.\n\nBoth types are important!\n:::\n\n## Download and explore the structure of the dataset in Excel\n\nThe 'iris' dataset is stored in a comma-separated value file here [iris.csv](iris.csv)\n\nDownload the dataset and have a look around in Excel.  Note the structure of the dataset\n\nThe `iris` data is an example of a dataset in *tidy* form.  We'll learn more about this in the next session, but in short in has:\n\n* A single rectangular table to represent the data\n* A column for each variable (characteristic)\n* A row for each observation (flower in this case)\n\nThis is very similar to how datasets are stored in software like SPSS or Stata, or in a database, but is different to how you might record data using GraphPad Prism.  We'll see more about how to arrange data like this later in the course.\n\nMake sure the dataset is stored in the root directory of your project.  \n\nStart a new script to begin your analysis of the 'iris' dataset.\n\nWe can use the `read.csv` function to load data from a csv file (later we'll see how to import Excel format data).  Type:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris <- read.csv(\"iris.csv\")\n```\n:::\n\n\n\n\nCheck your 'environment' tab for a new object.  Click on the object name to see it in the Viewer, or click on the small blue button next to it to expand the view in the environment window.\n\n## Exercise\n\n1. What is the class of the `iris` object that you have created?\n\n2. What is included in this data?\n\n3. What kind of descriptive statistics might we calculate to learn about this dataset?\n\n4. What kind of analytic (inferential) questions might we ask of the data?\n\n## Explore the structure of the dataset using R\n\nThere are a few different functions you can use to explore a dataset.  Test each with the `iris` data to see what they do.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(iris)\nhead(iris)\nsummary(iris)\ndim(iris)\nnrow(iris)\nView(iris)\n```\n:::\n\n\n\n\n\n## Use the data in calculations\n\nWe can extract individual variables (characteristics) and individual elements like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris$Sepal.Length \n```\n:::\n\n\n\n\nWhat do these lines do?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris$Sepal.Length[1]\n\niris$Sepal.Length[c(2,4,6)]\n\niris$Sepal.Length[10:20]\n\nc(2,4,6)\n\n10:20\n```\n:::\n\n\n\n\nWhat does this do?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(iris, col=iris$Species)\n```\n:::\n\n\n\n\n::: {.callout-note}\n`iris$Sepal.length` is a 'vector'.  A vector is a list of items all of the same type.  Here its a vector of numbers.  A data frame is a collection of vectors.  \n\nWhat are the types of each of the other vectors in the `iris` data frame?\n:::\n\nWe can use different R functions to get descriptive statistics for a vector.  Try each of these functions and see if you can understand what it does:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(iris$Sepal.Length)\n\niris$Sepal.Length |> mean()\n\nsd(iris$Sepal.Length)\n\niris$Sepal.Width |> hist()\n```\n:::\n\n\n\n\nWe can work on more than one variable at a time:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(iris$Sepal.Length, iris$Sepal.Width)\n\ncor.test(iris$Sepal.Length, iris$Sepal.Width)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwith(iris , cor(Sepal.Length , Sepal.Width))\n```\n:::\n\n\n\n\n\n## Test yourself - More exploration of the iris dataset\n\n1. How many rows does the `iris` dataset have?\n2. What is the class of each of its columns?\n3. What is the mean sepal length of the flowers?\n4. What is the smallest (minimum) sepal width?\n5. What is the correlation between petal length and petal width?\n6. Is this correlation statistically significant?\n7. (Difficult) How many `viriginca` flowers are included in the dataset?  \n8. (Difficult) Can you tabulate the `species` variable?\n9. (Difficult) Can you make a histogram of species with red bars?\n\n## Other packages for descriptive statistics (if you have time)\n\n(If we have time) `Base` R does not have good functions for making descriptive tables and graphs.  But there are many other `packages` that have been developed to help with this.  \n\nR packages are add ons developed by the R community to add or improve functions.  R packages are the great strength of the R system and mean that R can be used to perform almost any data-related task. \n\nIn particular the `gt` system is very good for making tables, and the `GGally` package has a nice function for making pairs plots.  You could install these packages and try them out:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"gtsummary\")\ngtsummary::tbl_summary(iris)\n```\n:::\n\n\n\n\nCan you stratify this table by species? (Check the help)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"GGally\")\nGGally::ggpairs(iris)\n```\n:::\n\n\n\n\nCompare this to the output from the 'base' function `pairs(iris)` or `plot(iris)`.\n\n# Tidyverse\n\nSo far we haven't tried to subset or stratify any analysis.  Usually we'll be interested in comparing different parts of the data, or looking at subgroups.\n\nBefore we go any further we're going to install another set of packages.  `Base' R has a few ways to manipulate datasets, but these can get very clunky and you won't use them much in practice so it's better to start using add-on packages as soon as possible.\n\nThe two major packages of data wrangling functions are `data.table` and `tidyverse`.  \n\nTidyverse is more widely used and so this is what we will focus on here.  If you become more familiar with R you might want to explore `data.table`.  \n\n::: {.callout-note}\nI am only going to teach `tidyverse` methods because they are the most widely used.  See <https://wetlandscapes.com/blog/a-comparison-of-r-dialects/> for how to use base or data.table to perform the same options.\n:::\n\nTidyverse is in fact a large collection of packages.  You can see all of the details here <https://www.tidyverse.org/packages/>.  In this course we will use functions from the following packages:\n\n* **dplyr** for data manipulation\n* **ggplot2** for making graphics\n* **broom** for organising analysis results\n\nCheck if you have `tidyverse` installed on the computer you are using.  Use the `packages` pane in the bottom right hand section of the screen and search for `tidyverse`.  If it is installed you will see a corresponding line in the `packages` pane with the current installed version number.\n\nIf you do not have `tidyverse` installed, then install it now from the menu or by using\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n\n\nThis will install a lot of packages and might take a few minutes.\n\nOnce the tidyverse packages are installed you can use all of their functions.  \n\nWe'll start by using some of the functions from the `dplyr` package.  `dplyr` includes functions for data manipulation and summarisation.  \n\nSee <https://dplyr.tidyverse.org/> for more information on the `dplyr` mains functions, and a cheat sheet for its day-to-day usage.\n\n## Using a function from `dplyr`\n\nThere are two ways to use functions installed as part of a package.  For example, to use the `glimpse` function from the `dplyr` package to look at the `iris` dataset, you can type:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::glimpse(iris)\n```\n:::\n\n\n\n\nor\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr) # or library(tidyverse)\nglimpse(iris)\n```\n:::\n\n\n\n\n:::{.callout}\nUsing `library` adds the package to the search path for the whole of your R session.  This means that R will be able to find all of the functions in this package without explicitly referencing the package every time.\n:::\n\nI will load the tidyverse package, which will attach all of the 'core' tidyverse packages into my current session:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\n## Using dplyr functions to manipulate and summarise data\n\nThe five main dplyr functions are `select`, `filter`, `mutate`, `group_by`, and `summarise`.  \n\nLet's learn by example what each of these functions does:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> select(Sepal.Length, Sepal.Width)\n\niris |> filter(Species==\"setosa\")\n\niris |> filter(Sepal.Length > 7.5)\n\niris |> arrange(Sepal.Length)\n\niris |> summarise(`Median Petal Width` = median(Petal.Width))\n\niris |> summarise(`Mean` = median(Petal.Width), `SD` = sd(Petal.Width))\n\niris |> mutate(Sepal.Area = Sepal.Length * Sepal.Width)\n\niris2 <- iris |> mutate(logPetalLength = log(Petal.Length))\n\niris2 <- iris |> mutate(PetalLengthGrouped = ntile(Petal.Length, 5) )\n```\n:::\n\n\n\n\nSo with `dplyr` we can take subsets of our data or our samples, split our samples up into groups, create new derived variables and make summary statistics.\n\nUsing pipes you can chain functions together.  Suppose you wanted the mean sepal length of `setosa` flowers:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> filter(Species==\"setosa\") |> summarise(mean(Sepal.Length))\n```\n:::\n\n\n\n\n`group_by` and `summarise` are often used together, to make summaries over groups.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> group_by(Species) |> summarise(mean(Sepal.Length), mean(Sepal.Width), n=n())\n```\n:::\n\n\n\n\nIt can be more readable if you write the command above using more than one line:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  filter(Species != \"setosa\") |> \n  group_by(Species) |> \n  summarise(\n    \"Mean sepal length\"=mean(Sepal.Length), \n    \"Mean sepal width\"=mean(Sepal.Width), \n    \"Number of Samples\"=n()\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  Species    `Mean sepal length` `Mean sepal width` `Number of Samples`\n  <chr>                    <dbl>              <dbl>               <int>\n1 versicolor                5.94               2.77                  50\n2 virginica                 6.59               2.97                  50\n```\n\n\n:::\n:::\n\n\n\n\n\nMake sure you understand exactly what is happening with each of the commands above.  In particular the last line, with `filter` followed by `group_by` followed by `summarise` demonstrates how simple functions can be built into powerful data manipulation and analysis commands.\n\n## Test yourself: data wrangling and summarising\n\nCan you use dplyr to:\n\n1. Find the mean sepal length\n2. Make a new dataset including only flowers with a petal length less than 2\n3. Find the mean of the sepal length for flowers with a petal length less than 2? (hint: use pipes to chain together the answers from questions 2 and 1.)\n4. Find the median and range for sepal width stratified across species? (hint: pipe together a `group_by` and a `summarise` call)\n\n# Graphics\n\nR has a simple built in system for making graphs but the outputs are not very good!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(Petal.Length ~ Species, data=iris)\n```\n\n::: {.cell-output-display}\n![](day1_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\n\n:::{callout-note}\nAlthough this `boxplot` function isn't very useful, note the `~` syntax as this is used widely elsewhere.  See the 'formula interface' section below for more information.\n:::\n\nThe ggplot() system is much more flexible, and produces publication quality outputs.  `ggplot2` is a core `tidyverse` package, so we loaded it earlier.  If it isn't loaded (if R says it can't find the `ggplot` function) then use `library(ggplot2)`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris) + aes(x=Sepal.Length, y=Sepal.Width, color=Species) + geom_point()\n```\n\n::: {.cell-output-display}\n![](day1_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Using a pipe and multiple lines to improve readability\niris |> ggplot() + \n  aes(x=Species, y=Petal.Length, fill=Species) + \n  geom_boxplot() + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](day1_files/figure-html/unnamed-chunk-34-2.png){width=672}\n:::\n:::\n\n\n\n\nWe'll see more ggplot in later sessions, but note the syntax, in particular how a dataset is passed to the ggplot function, how we specify the linkage between the data and the plot, and how different elements are added to make the plot.\n\n# Hypothesis tests and linear models\n\nDescriptive statistics are important, but our goal in science is often to test hypotheses or understand the mechanisms behind our data generation.\n\nSo, we might observe a difference in petal length between species in our sample, but we want to know if this reflects a real difference in average petal length in the population.  That is, does petal length depend on species among iris flowers in general?  \n\nFirst, we can generate a simple box plot as previously to explore this question:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=iris, aes(x=Species, y=Petal.Length, fill=Species)) + \n  geom_boxplot() + \n  labs(x=\"Species\", y=\"Petal Length\") + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](day1_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n\n\nIt looks like the two variables are related,  but we would like to perform a hypothesis test to see if the difference is statistically significant, and to get an estimate (with confidence interval) for the difference.\n\nTo get the coefficients (mean differences between groups) we can estimate a linear model:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel1 <- lm( Sepal.Length ~ Species, data=iris)\n```\n:::\n\n\n\n\nWhen you estimate a model R will not display any output. The results are all stored in the model object that is created.  Then you can access whatever output you want using other functions, eg:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Base R functions\nsummary(model1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = Sepal.Length ~ Species, data = iris)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.6880 -0.3285 -0.0060  0.3120  1.3120 \n\nCoefficients:\n                  Estimate Std. Error t value Pr(>|t|)    \n(Intercept)         5.0060     0.0728  68.762  < 2e-16 ***\nSpeciesversicolor   0.9300     0.1030   9.033 8.77e-16 ***\nSpeciesvirginica    1.5820     0.1030  15.366  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.5148 on 147 degrees of freedom\nMultiple R-squared:  0.6187,\tAdjusted R-squared:  0.6135 \nF-statistic: 119.3 on 2 and 147 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\nanova(model1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnalysis of Variance Table\n\nResponse: Sepal.Length\n           Df Sum Sq Mean Sq F value    Pr(>F)    \nSpecies     2 63.212  31.606  119.26 < 2.2e-16 ***\nResiduals 147 38.956   0.265                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\nconfint(model1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                      2.5 %   97.5 %\n(Intercept)       4.8621258 5.149874\nSpeciesversicolor 0.7265312 1.133469\nSpeciesvirginica  1.3785312 1.785469\n```\n\n\n:::\n\n```{.r .cell-code}\n# A tidyverse method:\nbroom::tidy(model1, conf.int=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 7\n  term              estimate std.error statistic   p.value conf.low conf.high\n  <chr>                <dbl>     <dbl>     <dbl>     <dbl>    <dbl>     <dbl>\n1 (Intercept)           5.01    0.0728     68.8  1.13e-113    4.86       5.15\n2 Speciesversicolor     0.93    0.103       9.03 8.77e- 16    0.727      1.13\n3 Speciesvirginica      1.58    0.103      15.4  2.21e- 32    1.38       1.79\n```\n\n\n:::\n\n```{.r .cell-code}\n# Functions from the `gtsummary` package if you have it installed\ngtsummary::tbl_regression(model1)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"pggesnuyua\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#pggesnuyua table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#pggesnuyua thead, #pggesnuyua tbody, #pggesnuyua tfoot, #pggesnuyua tr, #pggesnuyua td, #pggesnuyua th {\n  border-style: none;\n}\n\n#pggesnuyua p {\n  margin: 0;\n  padding: 0;\n}\n\n#pggesnuyua .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#pggesnuyua .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#pggesnuyua .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#pggesnuyua .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#pggesnuyua .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#pggesnuyua .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#pggesnuyua .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#pggesnuyua .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#pggesnuyua .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#pggesnuyua .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#pggesnuyua .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#pggesnuyua .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#pggesnuyua .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#pggesnuyua .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#pggesnuyua .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#pggesnuyua .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#pggesnuyua .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#pggesnuyua .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#pggesnuyua .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#pggesnuyua .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#pggesnuyua .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#pggesnuyua .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#pggesnuyua .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#pggesnuyua .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#pggesnuyua .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#pggesnuyua .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#pggesnuyua .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#pggesnuyua .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#pggesnuyua .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#pggesnuyua .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#pggesnuyua .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#pggesnuyua .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#pggesnuyua .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#pggesnuyua .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#pggesnuyua .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#pggesnuyua .gt_left {\n  text-align: left;\n}\n\n#pggesnuyua .gt_center {\n  text-align: center;\n}\n\n#pggesnuyua .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#pggesnuyua .gt_font_normal {\n  font-weight: normal;\n}\n\n#pggesnuyua .gt_font_bold {\n  font-weight: bold;\n}\n\n#pggesnuyua .gt_font_italic {\n  font-style: italic;\n}\n\n#pggesnuyua .gt_super {\n  font-size: 65%;\n}\n\n#pggesnuyua .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#pggesnuyua .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#pggesnuyua .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#pggesnuyua .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#pggesnuyua .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#pggesnuyua .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#pggesnuyua .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#pggesnuyua .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#pggesnuyua div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"label\"><span data-qmd-base64=\"PHN0cm9uZz5DaGFyYWN0ZXJpc3RpYzwvc3Ryb25nPg==\"><span class='gt_from_md'><strong>Characteristic</strong></span></span></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"estimate\"><span data-qmd-base64=\"PHN0cm9uZz5CZXRhPC9zdHJvbmc+\"><span class='gt_from_md'><strong>Beta</strong></span></span></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"conf.low\"><span data-qmd-base64=\"PHN0cm9uZz45NSUgQ0k8L3N0cm9uZz4=\"><span class='gt_from_md'><strong>95% CI</strong></span></span><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;line-height:0;\"><sup>1</sup></span></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"p.value\"><span data-qmd-base64=\"PHN0cm9uZz5wLXZhbHVlPC9zdHJvbmc+\"><span class='gt_from_md'><strong>p-value</strong></span></span></th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">Species</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"conf.low\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"p.value\" class=\"gt_row gt_center\"><br /></td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    setosa</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">—</td>\n<td headers=\"conf.low\" class=\"gt_row gt_center\">—</td>\n<td headers=\"p.value\" class=\"gt_row gt_center\"><br /></td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    versicolor</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">0.93</td>\n<td headers=\"conf.low\" class=\"gt_row gt_center\">0.73, 1.1</td>\n<td headers=\"p.value\" class=\"gt_row gt_center\"><0.001</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    virginica</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">1.6</td>\n<td headers=\"conf.low\" class=\"gt_row gt_center\">1.4, 1.8</td>\n<td headers=\"p.value\" class=\"gt_row gt_center\"><0.001</td></tr>\n  </tbody>\n  \n  <tfoot class=\"gt_footnotes\">\n    <tr>\n      <td class=\"gt_footnote\" colspan=\"4\"><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;line-height:0;\"><sup>1</sup></span> <span data-qmd-base64=\"Q0kgPSBDb25maWRlbmNlIEludGVydmFs\"><span class='gt_from_md'>CI = Confidence Interval</span></span></td>\n    </tr>\n  </tfoot>\n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\n## Test yourself (model outputs)\n\n1. Can you interpret the model summaries?\n2. Which model output format do you prefer?\n3. Can you estimate the linear model and display the summary in one line using pipes?\n\n::: {.callout-note}\nYou can run t-tests using `lm`, since a t-test is equivalent to a linear model with two group categorical predictor.  Linear models generalise many traditional statistical procedures.\n\nThe only difference that you might see is that in R, the default t-test is not student's t-test but Welch's t-test, which does not assume equal variance between groups.  Most of the time these are similar (and you should trust Welch's test if they are not) but if you don't see identical results between the `lm` and `t.test` functions this is likely the reason.\n:::\n\n## Further uses of linear models.\n\nGenerate all pairwise comparisons using `emmeans` or t-tests for individual pairs with `filter` then `lm`?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemmeans::emmeans(model1 , pairwise~Species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$emmeans\n Species    emmean     SE  df lower.CL upper.CL\n setosa       5.01 0.0728 147     4.86     5.15\n versicolor   5.94 0.0728 147     5.79     6.08\n virginica    6.59 0.0728 147     6.44     6.73\n\nConfidence level used: 0.95 \n\n$contrasts\n contrast               estimate    SE  df t.ratio p.value\n setosa - versicolor      -0.930 0.103 147  -9.033  <.0001\n setosa - virginica       -1.582 0.103 147 -15.366  <.0001\n versicolor - virginica   -0.652 0.103 147  -6.333  <.0001\n\nP value adjustment: tukey method for comparing a family of 3 estimates \n```\n\n\n:::\n:::\n\n\n\nYou can get many different contrasts or test different hypothesis based on this model using the `marginaleffects` package.\n\nModel diagnostics with the `performance` package.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nperformance::check_model(model1)\n```\n:::\n\n\n\n\n## More complex models (interactions and multiple regression)\n\nSuppose we want to fit a more complex model, whereby sepal length depends on petal length, with the relationship allowed to vary by species.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First make a model with Sepal.Length depending on Species and Petal.Length\nmodel2 <- lm( Sepal.Length ~ Species + Petal.Length, data=iris)\nsummary(model2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = Sepal.Length ~ Species + Petal.Length, data = iris)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.75310 -0.23142 -0.00081  0.23085  1.03100 \n\nCoefficients:\n                  Estimate Std. Error t value Pr(>|t|)    \n(Intercept)        3.68353    0.10610  34.719  < 2e-16 ***\nSpeciesversicolor -1.60097    0.19347  -8.275 7.37e-14 ***\nSpeciesvirginica  -2.11767    0.27346  -7.744 1.48e-12 ***\nPetal.Length       0.90456    0.06479  13.962  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.338 on 146 degrees of freedom\nMultiple R-squared:  0.8367,\tAdjusted R-squared:  0.8334 \nF-statistic: 249.4 on 3 and 146 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\n# Now add the interaction term.  These two models are the same.\nmodel3 <- lm( Sepal.Length ~ Species + Petal.Length + Species:Petal.Length, data=iris)\nmodel3 <- lm( Sepal.Length ~ Species * Petal.Length, data=iris)\nsummary(model3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = Sepal.Length ~ Species * Petal.Length, data = iris)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.73479 -0.22785 -0.03132  0.24375  0.93608 \n\nCoefficients:\n                               Estimate Std. Error t value Pr(>|t|)    \n(Intercept)                      4.2132     0.4074  10.341  < 2e-16 ***\nSpeciesversicolor               -1.8056     0.5984  -3.017  0.00302 ** \nSpeciesvirginica                -3.1535     0.6341  -4.973 1.85e-06 ***\nPetal.Length                     0.5423     0.2768   1.959  0.05200 .  \nSpeciesversicolor:Petal.Length   0.2860     0.2951   0.969  0.33405    \nSpeciesvirginica:Petal.Length    0.4534     0.2901   1.563  0.12029    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.3365 on 144 degrees of freedom\nMultiple R-squared:  0.8405,\tAdjusted R-squared:  0.8349 \nF-statistic: 151.7 on 5 and 144 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\n\nWe can use `augment` from the `broom` package to add predicted values to our dataset, with confidence intervals.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# look carefully at the output from here:\nlibrary(broom)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'broom' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\nmodel3 |> augment(interval=\"confidence\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 150 × 11\n   Sepal.Length Species Petal.Length .fitted .lower .upper  .resid   .hat .sigma\n          <dbl> <chr>          <dbl>   <dbl>  <dbl>  <dbl>   <dbl>  <dbl>  <dbl>\n 1          5.1 setosa           1.4    4.97   4.87   5.07  0.128  0.0226  0.337\n 2          4.9 setosa           1.4    4.97   4.87   5.07 -0.0724 0.0226  0.338\n 3          4.7 setosa           1.3    4.92   4.79   5.05 -0.218  0.0378  0.337\n 4          4.6 setosa           1.5    5.03   4.93   5.12 -0.427  0.0210  0.336\n 5          5   setosa           1.4    4.97   4.87   5.07  0.0276 0.0226  0.338\n 6          5.4 setosa           1.7    5.14   4.97   5.30  0.265  0.0583  0.337\n 7          4.6 setosa           1.4    4.97   4.87   5.07 -0.372  0.0226  0.336\n 8          5   setosa           1.5    5.03   4.93   5.12 -0.0266 0.0210  0.338\n 9          4.4 setosa           1.4    4.97   4.87   5.07 -0.572  0.0226  0.334\n10          4.9 setosa           1.5    5.03   4.93   5.12 -0.127  0.0210  0.337\n# ℹ 140 more rows\n# ℹ 2 more variables: .cooksd <dbl>, .std.resid <dbl>\n```\n\n\n:::\n:::\n\n\n\n\nFinally we can use ggplot to show these predicted values and confidence intervals.  Take care to understand how the output from each function (ie `lm`, `augment`) is piped into the next.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm( Sepal.Length ~ Species * Petal.Length, data=iris) |>\n  augment(interval=\"confidence\") |> \n  ggplot() + \n    aes(x=Petal.Length, y=Sepal.Length, color=Species) + \n    geom_ribbon(aes(y=.fitted,ymin=.lower, ymax=.upper), alpha=0.1) + \n    geom_point() + \n    geom_line(aes(y=.fitted),lwd=1) + \n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](day1_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Try changing the forumula to `Sepal.Length ~ Species + Petal.Length`\n# Which model has the better fit? (you can use anova(model2, model3) to compare models)\n```\n:::\n\n\n\n\n# Extra material below here\n\nBelow this point is extra material that was cut from the main day 1 tutorial but I've kept in this document because it might be interesting.  There are likely to be a few small mistakes in this section.\n\n## More detail on types and classes\n\nWe saw two object of two different 'classes' earlier. These classes were 'numeric' and 'character'.  The class of an object defines what kind of information it holds, and how other functions act on it.\n\nThere are four basic classes (modes) that you will commonly use and should be aware of.  These correspond to the types of data you might have.  The basic types are:\n\n*\t'numeric' – For keeping numbers, can be discrete or continuous\n*\t'logical' – can only take the values (TRUE or FALSE)\n*\t'character' – for strings of text\n*\t'factor' – for labelled categorical variables (ordered or unordered)\n\nLater in this tutorial we will see objects of more complex classes, these can store lots of different information of different modes:\n\n*\t‘data.frame’ – storing datasets\n*\t‘lm’ – stores the all results of a linear regression model\n\n## Character strings\n\nCharacter strings represent text rather than numbers.  Strings are used to label categories in a dataset, to identify columns in a dataset, to make your outputs more readable.  You also might find that part of your data has been entered as a string, for example patient identifiers or gene names in a database, or responses to open ended questions.\n\nStrings are identified in R (and in most other programming languages) by enclosing them in quotes.  Single quotes and double quotes can be used (and are treated almost identically), but double quotes are preferred.  For example try:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"Hello\")\n\nprint('Hello')\n\n# What happens here?\nprint(Hello)\n```\n:::\n\n\n\n\nA common mistake in R is to forget to enclose strings in quotes.  In which case R tries to interpret your input as an object name, leading to an error message if that name doesn’t exist.\n\n## Logicals\n\nLogicals represent binary information in the form `TRUE` or `FALSE`.  They most often arise as the result of a comparison, for example try:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3>2\n\n\"Hello\" == \"hello\"  # note the double equals sign, this distinguishes assignment from comparison\n```\n:::\n\n\n\n\n## Converting between types\n\nSometimes it is possible to convert an object from one class to another.  For example, a number might be stored as a character string in your data, and you will need to convert it into a numeric before you can do any analysis with it. For example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- \"3\"\nx*2 # What is the error message here?  What does it mean?\n\ny <- as.numeric(x)\ny*2\n```\n:::\n\n\n\n\n\n## Missing elements in vectors\n\nOften your data will include missing values.  R uses `NA` to represent missing values.  For example the following creates a vector (a single variable, like a single column of a data frame) with a missing value in the fourth position:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweights <- c(10,21,32,NA,14)\nweights\n```\n:::\n\n\n\n:::{.callout-warning}\nNote the difference between `NA` (a missing value) and `\"NA\"` (a character string containing the letters N and A.  I have been tripped up by this a few times when `\"NA\"` has been entered into a dataset.)\n:::\n\n## Exercise 1. Effect of missing values\n\nTry some other functions with myvector to see what impact the missing data point has.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(weights)\n\nplot(weights)\n\nweights>20\n\nmean(weights) # what happens here?  Why?  Can you fix it?\n\nis.na(weights) # what does this do?\n\nsum(is.na(weights)) # can you explain what this does?\n```\n:::\n\n\n\n\nThe behaviour of R functions with missing data can vary.  Some functions will not work, some will return `NA` but some will just exclude the missing elements and carry on.  If you have missing data it is important to understand how the R functions you are using will handle it.\n\n# More descriptive statistics\n\nIn this rest of this session we'll use base and tidyverse functions to complete some common descriptive and analytic tasks using the iris dataset.\n\n## A continuous variable stratified by a grouping variable, and the formula interface\n\nWe already saw a way to get means over a categorical variable with `tidyverse`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\niris |> group_by(Species) |> summarise(mean(Sepal.Length))\n```\n:::\n\n\n\n\nIf we want more than one summary statistic for example, it's easy with tidyverse (this is an example of a task that is difficult with base R):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> group_by(Species) |> summarise(n(),mean(Sepal.Length),sd(Sepal.Length))\n```\n:::\n\n\n\n\nNote here that we can write the call in more than one line to make it easier to read:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  group_by(Species) |> \n  summarise(\n    n(),\n    mean(Sepal.Length),\n    sd(Sepal.Length)\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  Species    `n()` `mean(Sepal.Length)` `sd(Sepal.Length)`\n  <chr>      <int>                <dbl>              <dbl>\n1 setosa        50                 5.01              0.352\n2 versicolor    50                 5.94              0.516\n3 virginica     50                 6.59              0.636\n```\n\n\n:::\n:::\n\n\n\n\ndplyr is good for making summary statistics, but to make publication ready tables you can explore the `gtsummary` package.\n\n<https://www.danieldsjoberg.com/gtsummary/articles/tbl_summary.html>\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gtsummary)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'gtsummary' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\niris |> tbl_summary( by=Species )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"unkaajjbwr\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#unkaajjbwr table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#unkaajjbwr thead, #unkaajjbwr tbody, #unkaajjbwr tfoot, #unkaajjbwr tr, #unkaajjbwr td, #unkaajjbwr th {\n  border-style: none;\n}\n\n#unkaajjbwr p {\n  margin: 0;\n  padding: 0;\n}\n\n#unkaajjbwr .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#unkaajjbwr .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#unkaajjbwr .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#unkaajjbwr .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#unkaajjbwr .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#unkaajjbwr .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#unkaajjbwr .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#unkaajjbwr .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#unkaajjbwr .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#unkaajjbwr .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#unkaajjbwr .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#unkaajjbwr .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#unkaajjbwr .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#unkaajjbwr .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#unkaajjbwr .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#unkaajjbwr .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#unkaajjbwr .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#unkaajjbwr .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#unkaajjbwr .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#unkaajjbwr .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#unkaajjbwr .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#unkaajjbwr .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#unkaajjbwr .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#unkaajjbwr .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#unkaajjbwr .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#unkaajjbwr .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#unkaajjbwr .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#unkaajjbwr .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#unkaajjbwr .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#unkaajjbwr .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#unkaajjbwr .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#unkaajjbwr .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#unkaajjbwr .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#unkaajjbwr .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#unkaajjbwr .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#unkaajjbwr .gt_left {\n  text-align: left;\n}\n\n#unkaajjbwr .gt_center {\n  text-align: center;\n}\n\n#unkaajjbwr .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#unkaajjbwr .gt_font_normal {\n  font-weight: normal;\n}\n\n#unkaajjbwr .gt_font_bold {\n  font-weight: bold;\n}\n\n#unkaajjbwr .gt_font_italic {\n  font-style: italic;\n}\n\n#unkaajjbwr .gt_super {\n  font-size: 65%;\n}\n\n#unkaajjbwr .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#unkaajjbwr .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#unkaajjbwr .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#unkaajjbwr .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#unkaajjbwr .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#unkaajjbwr .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#unkaajjbwr .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#unkaajjbwr .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#unkaajjbwr div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"label\"><span data-qmd-base64=\"PHN0cm9uZz5DaGFyYWN0ZXJpc3RpYzwvc3Ryb25nPg==\"><span class='gt_from_md'><strong>Characteristic</strong></span></span></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"stat_1\"><span data-qmd-base64=\"PHN0cm9uZz5zZXRvc2E8L3N0cm9uZz48YnIgLz4KTiA9IDUw\"><span class='gt_from_md'><strong>setosa</strong><br />\nN = 50</span></span><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;line-height:0;\"><sup>1</sup></span></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"stat_2\"><span data-qmd-base64=\"PHN0cm9uZz52ZXJzaWNvbG9yPC9zdHJvbmc+PGJyIC8+Ck4gPSA1MA==\"><span class='gt_from_md'><strong>versicolor</strong><br />\nN = 50</span></span><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;line-height:0;\"><sup>1</sup></span></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"stat_3\"><span data-qmd-base64=\"PHN0cm9uZz52aXJnaW5pY2E8L3N0cm9uZz48YnIgLz4KTiA9IDUw\"><span class='gt_from_md'><strong>virginica</strong><br />\nN = 50</span></span><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;line-height:0;\"><sup>1</sup></span></th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">X</td>\n<td headers=\"stat_1\" class=\"gt_row gt_center\">26 (13, 38)</td>\n<td headers=\"stat_2\" class=\"gt_row gt_center\">76 (63, 88)</td>\n<td headers=\"stat_3\" class=\"gt_row gt_center\">126 (113, 138)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">Sepal.Length</td>\n<td headers=\"stat_1\" class=\"gt_row gt_center\">5.00 (4.80, 5.20)</td>\n<td headers=\"stat_2\" class=\"gt_row gt_center\">5.90 (5.60, 6.30)</td>\n<td headers=\"stat_3\" class=\"gt_row gt_center\">6.50 (6.20, 6.90)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">Sepal.Width</td>\n<td headers=\"stat_1\" class=\"gt_row gt_center\">3.40 (3.20, 3.70)</td>\n<td headers=\"stat_2\" class=\"gt_row gt_center\">2.80 (2.50, 3.00)</td>\n<td headers=\"stat_3\" class=\"gt_row gt_center\">3.00 (2.80, 3.20)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">Petal.Length</td>\n<td headers=\"stat_1\" class=\"gt_row gt_center\">1.50 (1.40, 1.60)</td>\n<td headers=\"stat_2\" class=\"gt_row gt_center\">4.35 (4.00, 4.60)</td>\n<td headers=\"stat_3\" class=\"gt_row gt_center\">5.55 (5.10, 5.90)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">Petal.Width</td>\n<td headers=\"stat_1\" class=\"gt_row gt_center\">0.20 (0.20, 0.30)</td>\n<td headers=\"stat_2\" class=\"gt_row gt_center\">1.30 (1.20, 1.50)</td>\n<td headers=\"stat_3\" class=\"gt_row gt_center\">2.00 (1.80, 2.30)</td></tr>\n  </tbody>\n  \n  <tfoot class=\"gt_footnotes\">\n    <tr>\n      <td class=\"gt_footnote\" colspan=\"4\"><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;line-height:0;\"><sup>1</sup></span> <span data-qmd-base64=\"TWVkaWFuIChRMSwgUTMp\"><span class='gt_from_md'>Median (Q1, Q3)</span></span></td>\n    </tr>\n  </tfoot>\n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\n\n## Recoding a variable into groups\n\nSuppose we want to classify flowers into three groups based on their petal length.  We need to add another categorical variable to the dataset.\n\nWhat class should that new variable be?\n\nBase R has the function `cut` that divides continuous variables into groups.  Tidyverse has a few extensions of this (weirdly in the ggplot2 package), including `cut_number` that can divide up a continuous variable into three equal groups, and allow us to add labels to them.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncut_number(iris$Petal.Length, 3, labels=c(\"Short\", \"Medium\", \"Long\") )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using tidyverse to create this variable and add it to the dataset:\nlibrary(ggplot2)\n\niris <- iris |> mutate(PetalLengthGrouped = cut_number(Petal.Length, 3, labels=c(\"Short\", \"Medium\", \"Long\") )) \n```\n:::\n\n\n\n\nAlthough it can be useful descriptively, it is sometimes a very bad idea to group up your variables like this.  See [Don't dichotomise your data](dichot.qmd) for an explanation.",
    "supporting": [
      "day1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}